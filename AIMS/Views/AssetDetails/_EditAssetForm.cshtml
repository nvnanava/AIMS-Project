@* Views/Home/_EditAssetForm.cshtml *@
<div class="modal fade" id="editAssetModal" tabindex="-1" aria-labelledby="editAssetModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content aimsds-shell">

            <!-- ===== Modal Header ===== -->
            <div class="modal-header aimsds-header">
                <h5 class="modal-title" id="editAssetModalLabel">Edit Asset</h5>
                <button type="button" class="btn-close aimsds-close" data-bs-dismiss="modal"
                    aria-label="Close"></button>
            </div>

            <!-- ===== Modal Body ===== -->
            <div class="modal-body p-4">
                <form id="editAssetForm" novalidate>
                    <input type="hidden" id="editId" name="id" />

                    <div id="editAssetErrorMessage" class="alert alert-danger" style="display:none;"></div>

                    <div class="mb-3">
                        <label for="editName" class="form-label">Asset Name</label>
                        <input type="text" id="editName" name="name" class="form-control" placeholder="Enter asset name"
                            required>
                        <div class="invalid-feedback">Asset Name is required.</div>
                    </div>

                    <div class="mb-3">
                        <label for="editType" class="form-label">Type</label>
                        <select id="editType" name="type" class="form-select"></select>
                    </div>

                    <div class="mb-3">
                        <label for="editTag" class="form-label">Tag Number</label>
                        <input type="text" id="editTag" name="tagNumber" class="form-control"
                            placeholder="Enter tag number" required>
                        <div class="invalid-feedback">Tag Number is required.</div>
                    </div>

                    <div class="mb-3">
                        <label for="editStatus" class="form-label">Status</label>
                        <select id="editStatus" name="status" class="form-select">
                            <option value="">-- Select status --</option>
                            <option>Available</option>
                            <option>Assigned</option>
                            <option>Surveyed</option>
                            <option>Marked for Survey</option>
                            <option>In Repair</option>
                            <option>Archived</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="editComments" class="form-label">Comments</label>
                        <textarea id="editComments" name="comments" class="form-control" rows="4"
                            placeholder="Add any remarks..."></textarea>
                    </div>

                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="markForSurvey" name="markForSurvey">
                        <label class="form-check-label" for="markForSurvey">Mark for Survey</label>
                    </div>

                    <!-- ===== Modal Footer / Buttons ===== -->
                    <div class="modal-footer d-flex justify-content-between">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                            Close
                        </button>
                        <div>
                            <button type="button" class="btn btn-outline-danger me-2 reset-fields-btn">
                                Reset Fields
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Save Changes
                            </button>
                        </div>
                    </div>

                </form>
            </div>

        </div>
    </div>
</div>


<script>
  function fetchUniqueAssetTypes() {
    return aimsFetch('/api/assets/types/unique');
  }

  function valueToSend(el) {
    if (!el) throw new Error("Incorrect element specified");
    const v = (el.value ?? "").trim();
    const def = el.dataset.defaultValue ?? "";
    return v !== def ? v : null;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const modalEl = document.getElementById('editAssetModal');
    if (!modalEl) return;

    const form = modalEl.querySelector('#editAssetForm');
    const errorBox = modalEl.querySelector('#editAssetErrorMessage');

    const editId = modalEl.querySelector('#editId');
    const nameInput = modalEl.querySelector("#editName");
    const typeSelect = modalEl.querySelector('#editType');
    const tagInput = modalEl.querySelector('#editTag');
    const statusSel = modalEl.querySelector('#editStatus');
    const commentsInput = modalEl.querySelector('#editComments');
    const mfs = modalEl.querySelector('#markForSurvey');

    function toggleMfsAvailability() {
      const status = (statusSel.value || "").toLowerCase();
      if (status === "available") {
        mfs.disabled = false;
      } else {
        mfs.disabled = true;
        mfs.checked = false;
      }
    }

    async function populateAssetTypes() {
      try {
        const assetTypes = await fetchUniqueAssetTypes();
        typeSelect.replaceChildren();
        assetTypes.forEach(type => {
          const option = document.createElement("option");
          option.value = type;
          option.text = type;
          typeSelect.appendChild(option);
        });
      } catch (error) {
        console.error("Failed to populate asset types:", error);
      }
    }

    // When the modal is opened, initialize and populate fields
    modalEl.addEventListener('show.bs.modal', async function (event) {
      const button = event.relatedTarget;
      if (!button) return;

      await populateAssetTypes();


      // Fill values from data-* on the trigger button
      editId.value = button.getAttribute('data-hardware-id') || button.getAttribute('data-software-id') || '';
      editId.dataset.defaultValue = editId.value;

      nameInput.value = button.getAttribute('data-name') || '';
      nameInput.dataset.defaultValue = nameInput.value;

      typeSelect.value = button.getAttribute('data-type') || '';
      typeSelect.dataset.defaultValue = typeSelect.value;

      tagInput.value = button.getAttribute('data-tag') || '';
      tagInput.dataset.defaultValue = tagInput.value;

      statusSel.value = button.getAttribute('data-status') || '';
      statusSel.dataset.defaultValue = statusSel.value;

      commentsInput.value = button.getAttribute('data-comments') || '';
      commentsInput.dataset.defaultValue = commentsInput.value;

      toggleMfsAvailability();
      const v = (statusSel.value || '').toLowerCase();
      mfs.checked = (v.includes('marked for survey') || v.includes('surveyed'));

    });
    
    // Prefill from sessionStorage if available (from add asset flow)
    modalEl.addEventListener('show.bs.modal', function () {
      const savedData = sessionStorage.getItem("addAssetData");
      if (savedData) {
        try {
          const data = JSON.parse(savedData);
          const form = modalEl.querySelector("#editAssetForm");
          form.querySelectorAll("input, select, textarea").forEach(input => {
            const field = input.name;
            if (data[field]) {
              input.value = data[field];
              input.readOnly = true;
              input.classList.add("prefilled");
            }
          });
        } catch (err) {
          console.warn("Failed to parse addAssetData:", err);
        }
      }
    });


    // Status/checkbox sync & availability
    if (statusSel) {
      statusSel.addEventListener('change', function () {
        toggleMfsAvailability();
        const v = (this.value || '').toLowerCase();
        mfs.checked = (v.includes('marked for survey') || v.includes('surveyed'));
      });
    }
    if (mfs) {
      mfs.addEventListener('change', function () {
        if (this.checked) statusSel.value = 'Marked for Survey';
        toggleMfsAvailability();
      });
    }

    // Submit handler
    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      errorBox.style.display = 'none';
      errorBox.innerText = '';

      // Basic client validation
      if (!tagInput.value.trim()) {
        tagInput.classList.add('is-invalid');
        errorBox.innerText = 'Tag Number is required.';
        errorBox.style.display = 'block';
        return;
      } else tagInput.classList.remove('is-invalid');

      if (!nameInput.value.trim()) {
        nameInput.classList.add('is-invalid');
        errorBox.innerText = 'Asset Name is required.';
        errorBox.style.display = 'block';
        return;
      } else nameInput.classList.remove('is-invalid');

      const assetType = (typeSelect.value || '').trim();
      let dto, url;

      if (assetType === "Software") {
        url = "/api/software/edit";
        dto = {
          SoftwareID: parseInt(editId.value, 10),
          SoftwareName: valueToSend(nameInput),
          SoftwareType: valueToSend(typeSelect),
          SoftwareLicenseKey: valueToSend(tagInput), // <-- send license key so "Tag #" updates for software
          Comment: valueToSend(commentsInput),
        };
      } else {
        url = "/api/hardware/edit";
        dto = {
          HardwareID: parseInt(editId.value, 10),
          AssetName: valueToSend(nameInput),
          AssetType: valueToSend(typeSelect),
          Status: valueToSend(statusSel),
          Comment: valueToSend(commentsInput),
          MarkForSurvey: mfs.checked
        };
        const newTag = valueToSend(tagInput);
        if (newTag !== null) {
          dto.AssetTag = newTag;
        }
      }

      try {
        const id = dto.HardwareID || dto.SoftwareID;
        const updated = await aimsFetch(`${url}/${id}`, {
          method: 'PUT',
          body: JSON.stringify(dto)
        });

        // Success: close modal and refresh list
        const modal = bootstrap.Modal.getInstance(modalEl);
        if (modal) modal.hide();


        const urlParams = new URLSearchParams(window.location.search);
        const category = urlParams.get("category") || "Charging Cable";
        await new Promise(resolve => setTimeout(resolve, 250));

        if (window.loadAssets) {
          await window.loadAssets(category);
        } else {
          location.reload();
        }
      } catch (err) {
        console.error("Edit failed:", err);

        if (err.isValidation && err.data) {
          const combined = Object.values(err.data).flat().join(' ').trim();
          errorBox.innerText = combined || "Update failed.";
        } else {
          errorBox.innerText = (err.message || "Update failed.");
        }

        errorBox.style.display = 'block';
      }
    });

    // Reset fields button (inside DOMContentLoaded)
    const resetBtn = modalEl.querySelector("#editAssetForm .reset-fields-btn");
    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        const formEl = modalEl.querySelector("#editAssetForm");
        if (!formEl) return;

        // 1) Unlock fields + remove visual prefill hint
        formEl.querySelectorAll("input, select, textarea").forEach(input => {
          input.readOnly = false;
          input.classList.remove("prefilled");

          // 2) Restore original values from data-default-value if present
          const def = input.dataset.defaultValue;
          if (typeof def !== "undefined") {
            // For checkboxes use checked; for others use value
            if (input.type === "checkbox") {
              input.checked = (def === "true" || def === true);
            } else {
              input.value = def ?? "";
            }
          }

          // 3) Clear any validation styling/messages
          input.classList.remove("is-invalid");
        });

        // 4) Clear top-level error box (if shown)
        if (errorBox) {
          errorBox.style.display = "none";
          errorBox.innerText = "";
        }

        // 5) Re-sync MFS availability
        toggleMfsAvailability();

        // 6) Prevent auto-prefill from locking again on this open instance
        try { sessionStorage.removeItem("addAssetData"); } catch { }

      });
    }
  });

    modalEl.addEventListener('show.bs.modal', function () {
        const savedData = sessionStorage.getItem("addAssetData");
        if (savedData) {
            try {
                const data = JSON.parse(savedData);
                const form = modalEl.querySelector("#editAssetForm");
                form.querySelectorAll("input, select, textarea").forEach(input => {
                    const field = input.name;
                    if (data[field]) {
                        input.value = data[field];
                        input.readOnly = true;
                        input.classList.add("prefilled");
                    }
                });
            } catch (err) {
                console.warn("Failed to parse addAssetData:", err);
            }
        }
    });
</script>
