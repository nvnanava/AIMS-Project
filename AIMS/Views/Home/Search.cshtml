@{
  ViewData["Title"] = "Search";

  var tableHeaders = new List<string> { "Asset Name", "Type", "Tag #", "Assignment", "Status" };
  // Define Table Data
  var tableData = new List<Dictionary<string, string>> {
new Dictionary<string, string> { {"Asset Name", "Lenovo ThinkPad E16"},
{"Type", "Laptop"}, {"Tag #", "LT-0020"}, {"Assignment", "John Smith (28809)"},
{"Status", "Assigned"} },
new Dictionary<string, string> { {"Asset Name", "Dell S2421NX"},
{"Type", "Monitor"}, {"Tag #", "MN-0001"}, {"Assignment", "Jane Doe (69444)"},
{"Status", "Assigned"} },
new Dictionary<string, string> { {"Asset Name", "Logitech Zone 300"},
{"Type", "Headset"}, {"Tag #", "HS-0080"}, {"Assignment", "Unassigned"},
{"Status", "Available"} },
new Dictionary<string, string> { {"Asset Name", "Lenovo IdeaCentre 3"},
{"Type", "Desktop"}, {"Tag #", "DT-0011"}, {"Assignment", "Randy Orton (58344)"},
{"Status", "Damaged"} },
new Dictionary<string, string> { {"Asset Name", "Microsoft 365 Business"},
{"Type", "Software"}, {"Tag #", "SW-0100"}, {"Assignment", "Robin Williams (10971)"},
{"Status", "Assigned"} },
new Dictionary<string, string> { {"Asset Name", "HP 527SH"},
{"Type", "Monitor"}, {"Tag #", "MN-0023"}, {"Assignment", "Sarah Johnson (62241)"},
{"Status", "In Repair"} },
new Dictionary<string, string> { {"Asset Name", "HP Pavillion TP01-2234"},
{"Type", "Desktop"}, {"Tag #", "DT-0075"}, {"Assignment", "Unassigned"},
{"Status", "Available"} },
new Dictionary<string, string> { {"Asset Name", "Samsung Galaxy Book4"},
{"Type", "Laptop"}, {"Tag #", "LT-0005"}, {"Assignment", "Caitlin Clark (90334)"},
{"Status", "Damaged"} },
new Dictionary<string, string> { {"Asset Name", "Logitech Zone Vibe 100"},
{"Type", "Headset"}, {"Tag #", "HS-0015"}, {"Assignment", "Brian Regan (27094)"},
{"Status", "In Repair"} },
new Dictionary<string, string> { {"Asset Name", "Belkin BoostCharge 3.3ft USB-C"},
{"Type", "Charging Cable"}, {"Tag #", "CC-0088"}, {"Assignment", "Unassigned"},
{"Status", "Available"} },
new Dictionary<string, string> { {"Asset Name", "Dell Inspiron 3030"},
{"Type", "Desktop"}, {"Tag #", "DT-0100"}, {"Assignment", "Maximillian Brandt"},
{"Status", "Assigned"} },
new Dictionary<string, string> { {"Asset Name", "Poly Voyager 4320"},
{"Type", "Headset"}, {"Tag #", "HS-0001"}, {"Assignment", "Emily Carter (47283)"},
{"Status", "In Repair"} },
new Dictionary<string, string> { {"Asset Name", "100W Super Charger"},
{"Type", "Charging Cable"}, {"Tag #", "CC-0019"}, {"Assignment", "Bruce Wayne (34532)"},
{"Status", "Damaged"} },
new Dictionary<string, string> { {"Asset Name", "Dell Inspiron 15"},
{"Type", "Laptop"}, {"Tag #", "LT-0115"}, {"Assignment", "Kate Rosenberg (93232)"},
{"Status", "Assigned"} }
};
}

<div class="table-container">
  <table class="asset-table">
    <thead>
      <tr class="search-container">
        @foreach (var header in tableHeaders)
        {
          <th scope="col">
            <input class="search-input" type="text" name="@header" id="@header" placeholder="@("Filter by " + header)" />
          </th>
        }
      </tr>
    </thead>
    <tbody id="table-body">
      @if (tableData.Count == 0)
      {
        <tr>
          <td colspan="@tableData.Count" style="text-align: center;">No data available</td>
        </tr>
      }
      else
      {
        @foreach (var row in tableData)
        {
          <tr class="result">
            @foreach (var header in tableHeaders)
            {
              <td id="@header">@(row.ContainsKey(header) ? row[header] : "-")</td>
            }
          </tr>
        }
      }
    </tbody>
  </table>
</div>

<script type="text/javascript">

  /**
  This function verifies that a row satisfies a header input's current inputted value.

  It accepts the relevant header name, and the row to verify.
  */
  function validateCellUsingHeader(header, row) {
    // if the row text does not include a filter's current value, it does not satisfy the rule.
    if (!row.innerHTML.toLowerCase().includes(inputState[header].toLowerCase())) {
      return false;
    } else {
      return true;
    }
  }

  /**
    This is the generalized callback function which will break called when an input's state changes.

    Based on the new value, it will filter out any rules. It makes use of global state to have multiple
    filters apply at once.

    to avoid more calls to the database aside from the initial page load, we use HTML manipulation.
  */
  function filter(e) {
    // stop this function from running on modifier keys
    if (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey || e.key === 'Tab') {
      return;
    }

    // new inputted value
    const inputValue = e.target.value;
    const header = e.target.getAttribute('name');

    // update the state
    inputState[header] = inputValue;

    // get all the rows
    const results = document.querySelectorAll(".result");

    // validate each row
    for (const result of results) {
      // check all headers:
      for (let i = 0; i < headers.length; i++) {
        if (!validateCellUsingHeader(headers[i], result)) {
          result.style.display = "none";
          break;
        }
        // if last header check passes, this row is not filtered
        if (i == headers.length - 1) {
          result.style.display = "";
        }
      }
    }
  }

  const inputs = document.querySelectorAll(".search-input");
  // use the name attributes of the inputs to get the header names.
  const headers = Array.from(inputs).map(elem => elem.getAttribute("name"));

  // create an empty state for each header at the start
  const inputState = Object.fromEntries(headers.map((h) => [h, '']));

  // assign an event listener for each input (will activate on: keyboard entry,entry from 
  // non-keyboard sources).
  for (const input of inputs) {
    input.addEventListener("input", filter)
  }

</script>
