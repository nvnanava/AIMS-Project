@using AIMS.Utilities
@await Html.PartialAsync("_AssetAddForm")
@await Html.PartialAsync("_EditAssetForm")
@await Html.PartialAsync("_AddCategoryForm")
@await Html.PartialAsync("_SoftwareAddForm")

@section Styles {
  <link rel="stylesheet" href="~/css/AssetDetailsComponent.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetButton.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetAddForm.css" asp-append-version="true" />
}

@{
  var category = ViewData["Category"]?.ToString() ?? "Unknown";
  ViewData["Title"] = $"{category} Asset Details";
}


<h2 class="text-center my-4">@ViewData["Title"]</h2>

<div class="table-wrapper" style="position: relative; width: fit-content; margin: 0 auto;padding: 30px;">
  <table class="asset-table">
    <thead>
      <tr>
        <th>Asset Name</th>
        <th>Type</th>
        <th id="seatOrTagHeader">Tag #</th>
        <th id="status-col-header">Status</th>

        <th>
          <div style="margin-left: auto;">
            @if (User.IsAdmin())
            { // Only show the Add button to admins
              @await Html.PartialAsync("_AssetButton")
            }
          </div>
        </th>
      </tr>
    </thead>
    <tbody id="assetTableBody">
      <!-- Filled dynamically -->
    </tbody>
  </table>

  <!-- Look-ahead pager -->
  <div id="asset-pager" class="search-pager" hidden>
    <button type="button" id="asset-prev" class="pager-btn">Prev</button>
    <span id="asset-status" class="pager-status"></span>
    <button type="button" id="asset-next" class="pager-btn">Next</button>
  </div>
</div>

<p id="emptyMessage" class="text-center" style="display:none;">
  No assets found for <strong>@category</strong>.
</p>

<div id="popup" style="
    display: none;
    position: fixed;
    background: white;
    padding: 12px 16px;
    border: 1.5px solid #ccc;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    font-size: 0.85rem;
    max-width: 220px;
    width: max-content;
    word-wrap: break-word;
    line-height: 1.4;
    z-index: 1000;">
</div>


@* <script>
  // --- Safety: only allow known categories to be used in the API call ---
  const ALLOWED_TYPES = new Set(["monitor", "laptop", "desktop", "software", "headset", "charging cable"]);
  function normalizeCategory(raw) {
    const c = String(raw || "").trim().toLowerCase();
    const map = { monitors: "monitor", laptops: "laptop", desktops: "desktop", headsets: "headset", softwares: "software" };
    return (map[c] || c);
  }

  // ---------------- Look-ahead pager state (client cache) ----------------
  let currentPage = 1;
  let pageSize = 50;                 // default for details; adjust freely
  const pageCache = new Map();       // pageNumber -> AssetRowVm[]
  let lastMeta = { total: -1, page: 1, pageSize: 50 }; // total:-1 => look-ahead
  const pager = document.getElementById('asset-pager');
  const btnPrev = document.getElementById('asset-prev');
  const btnNext = document.getElementById('asset-next');
  const lblStatus = document.getElementById('asset-status');

  // ---------------- Helpers ----------------
  function applyEmpty(isEmpty) {
    document.getElementById("emptyMessage").style.display = isEmpty ? "block" : "none";
  }
  function clearTable() {
    const tbody = document.getElementById("assetTableBody");
    tbody.innerHTML = "";
  }
  function renderRows(rows) {
    clearTable();
    const tbody = document.getElementById("assetTableBody");
    const totalSeats = rows.length;

    (rows || []).forEach((asset, index) => {
      // Inject seat info before rendering
      if (asset.type?.toLowerCase().includes("software")) {
        asset.displaySeatOrTag = `Seat ${index + 1} of ${totalSeats}`;
      } else {
        asset.displaySeatOrTag = asset.assetTag || asset.tag || asset.hardwareID || "N/A";
      }
      renderRow(asset, index + 1, totalSeats);
    });
  }

  function updatePager(items) {
    if (!pager || !btnPrev || !btnNext || !lblStatus) return;
    const total = lastMeta?.total ?? -1;
    const page = currentPage;
    const size = lastMeta?.pageSize ?? pageSize;

    let hasNext, totalPages;
    if (total === -1) {
      // Look-ahead: if we got a full page, there might be more
      hasNext = (items.length === size);
      totalPages = page + (hasNext ? 1 : 0);   // display hint only
      lblStatus.textContent = `Page ${page}`;
    } else {
      totalPages = Math.max(1, Math.ceil(total / size));
      hasNext = page < totalPages;
      lblStatus.textContent = `Page ${page} of ${totalPages}`;
    }
    const hasPrev = page > 1;
    btnPrev.disabled = !hasPrev;
    btnNext.disabled = !hasNext;
    pager.hidden = (page === 1 && items.length === 0);
  }

  // --------------- Column Header switcher ----------------
  function setStatusHeaderFor(isSoftware) {
    const th = document.getElementById('status-col-header');
    if (!th) return;
    if (isSoftware) {
      th.textContent = 'Used / Total Seats';
      th.title = 'License seats used / total seats';
    } else {
      th.textContent = 'Status';
      th.title = '';
    }
  }

  // ---------------- Fetch one page (uses look-ahead & caches) ----------------
  async function getPage(category, page, size) {
    // Cache first
    if (pageCache.has(page)) {
      const items = pageCache.get(page) || [];
      lastMeta.page = page;
      lastMeta.pageSize = size;
      return { items, total: lastMeta.total, page, pageSize: size };
    }

    const safe = normalizeCategory(category);
    if (!ALLOWED_TYPES.has(safe)) return { items: [], total: 0, page, pageSize: size };

    const url = new URL("/api/assets", window.location.origin);
    url.searchParams.set("page", String(page));
    url.searchParams.set("pageSize", String(size));
    url.searchParams.set("category", safe);
    url.searchParams.set("scope", "all");
    // IMPORTANT: tell server we want look-ahead behavior
    url.searchParams.set("totalsMode", "lookahead");


    const data = await aimsFetch(url.toString());

    // Expecting: { items, total, page, pageSize } where total == -1 means "there is/was another page"
    const items = Array.isArray(data.items) ? data.items : [];
    pageCache.set(page, items);
    lastMeta = { total: (typeof data.total === "number" ? data.total : -1), page: data.page || page, pageSize: data.pageSize || size };
    return { items, total: lastMeta.total, page: lastMeta.page, pageSize: lastMeta.pageSize };
  }

  // ---------------- Category page loader (pager-driven) ----------------
  async function loadCategoryPaged(category, page = 1) {
    try {
      const isSoftwareCategory = normalizeCategory(category) === 'software';
      setStatusHeaderFor(isSoftwareCategory);

      const { items } = await getPage(category, page, pageSize);
      currentPage = page;
      renderRows(items);
      applyEmpty(items.length === 0 && page === 1);
      updatePager(items);
    } catch (err) {
      console.error(err);
      clearTable();
      applyEmpty(true);
      updatePager([]);
    }
  }

  // ---------------- Single by tag (unchanged) ----------------
  async function loadOneByTag(tag) {
    try {
      const url = new URL(`/api/assets/one?tag=${encodeURIComponent(tag)}&devBypass=true`);
      const asset = await aimsFetch(url.toString());
      if (!asset) throw new Error(`Failed to load asset`);
      // Set header based on the actual asset type when viewing a single item
      const isSoftware = String(asset.type || '').toLowerCase() === 'software';
      setStatusHeaderFor(isSoftware);

      const currentCategory = getCurrentCategory();
      const assetCategory = (asset.type || "").trim();
      if (assetCategory && currentCategory &&
        assetCategory.toLowerCase() !== currentCategory.toLowerCase()) {
        if (AUTO_FIX_CATEGORY) {
          redirectToCorrectCategory(assetCategory, asset.tag || tag);
          return;
        } else {
          showCategoryMismatchError(assetCategory, currentCategory);
        }
      }

      clearTable();
      applyEmpty(false);
      renderRow(asset);
      // Hide pager for single-asset path
      pager.hidden = true;
    } catch (err) {
      console.error(err);
      clearTable();
      applyEmpty(true);
      pager.hidden = true;
    }
  }

  // ---------------- Wire up pager buttons ----------------
  if (btnPrev) btnPrev.addEventListener('click', async () => {
    if (currentPage > 1) {
      const category = getCurrentCategory();
      await loadCategoryPaged(category, currentPage - 1);
    }
  });
  if (btnNext) btnNext.addEventListener('click', async () => {
    const category = getCurrentCategory();
    await loadCategoryPaged(category, currentPage + 1);
  });


  // -------------- Admin buttons ----------------
  function makeEditButton(asset) {
    return `
    <button type="button"
            class="action-btn blue-pencil"
            aria-label="Edit ${asset.assetName}"
            title="Edit asset"
            data-bs-toggle="modal"
            data-hardware-id="${asset.hardwareID || ''}"
            data-software-id="${asset.softwareID || ''}"
            data-bs-target="#editAssetModal"
            data-name="${asset.assetName}"
            data-type="${asset.type}"
            data-tag="${asset.tag}"
            data-comments="${asset.comment || ''}"
            data-status="${asset.status}">
      <svg viewBox="0 0 16 16" width="16" height="16" class="pencil-svg" aria-hidden="true">
        <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3z"></path>
        <path d="M.146 13.854a.5.5 0 0 0 .168.11l4.39 1.464a.5.5 0 0 0 .498-.13l9-9L10.5 1.793l-9 9a.5.5 0 0 0-.13.498L.854 15.854a.5.5 0 0 0-.708-.708L.146 13.854z"></path>
      </svg>
    </button>`;
  }

  function makeArchiveButton(asset) {
    return `
    <button type="button"
            class="action-btn red-archive"
            aria-label="Archive ${asset.assetName}"
            title="Archive asset"
            onclick="archiveAsset('${asset.hardwareID ?? asset.softwareID}', '${asset.assetName}', '${asset.type}')">
      <svg xmlns="http://www.w3.org/2000/svg"
           width="16" height="16"
           fill="currentColor"
           viewBox="0 0 16 16"
           class="bi bi-archive-fill">
        <path d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15zM5.5 7h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1M.8 1a.8.8 0 0 0-.8.8V3a.8.8 0 0 0 .8.8h14.4A.8.8 0 0 0 16 3V1.8a.8.8 0 0 0-.8-.8z"/>
      </svg>
    </button>`;
  }


  function makeUnarchiveButton(asset) {
    return `
    <button type="button"
            class="action-btn green-unarchive"
            aria-label="Unarchive ${asset.assetName}"
            title="Unarchive asset"
            onclick="unarchiveAsset('${asset.hardwareID ?? asset.softwareID}', '${asset.assetName}', '${asset.type}')">
      <svg xmlns="http://www.w3.org/2000/svg"
           width="16" height="16"
           fill="currentColor"
           viewBox="0 0 16 16"
           class="bi bi-archive-fill">
        <path d="M12.643 15C13.979 15 15 13.845 15 12.5V5H1v7.5C1 13.845 2.021 15 3.357 15zM5.5 7h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1M.8 1a.8.8 0 0 0-.8.8V3a.8.8 0 0 0 .8.8h14.4A.8.8 0 0 0 16 3V1.8a.8.8 0 0 0-.8-.8z"/>
      </svg>
    </button>`;
  }

  // ---------------- Boot ----------------
  const AUTO_FIX_CATEGORY = true;
  function getCurrentCategory() {
    const urlParams = new URLSearchParams(window.location.search);
    return (urlParams.get("category") || SERVER_CATEGORY || "").trim();
  }
  function redirectToCorrectCategory(correctCategory, tag) {
    const url = new URL('/Home/AssetDetailsComponent', window.location.origin);
    url.searchParams.set('category', correctCategory);
    url.searchParams.set('tag', tag);
    window.location.replace(url.toString());
  }
  function showCategoryMismatchError(expected, actual) {
    const msg = document.createElement('div');
    msg.style.cssText = `
      margin: 12px auto; max-width: 720px; padding: 12px 14px;
      border: 1px solid #e67e22; background:#fff7ec; color:#8c4b00;
      border-radius: 8px; font-size: 14px;
    `;
    msg.innerHTML = `
      <strong>Wrong page for this asset.</strong><br/>
      You’re viewing the <em>${escapeHtml(actual)}</em> page, but tag belongs to <em>${escapeHtml(expected)}</em>.
      Please switch to the correct category or use the search again.
    `;
    document.body.prepend(msg);
  }
  function escapeHtml(s) {
    return String(s ?? "").replace(/[&<>"']/g, c => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
  }

  function statusClassFor(status) {
    switch (String(status || "").toLowerCase()) {
      case "available": return "status-available";
      case "assigned": return "status-assigned";
      case "marked for survey": return "status-marked-for-survey";
      case "in repair":
      case "damaged": return "status-in-repair";
      default: return "";
    }
  }

  // ---------------- Row renderer (seats for software; status for hardware) ----------------
  function renderRow(asset) {
    const tbody = document.getElementById("assetTableBody");
    const row = document.createElement("tr");
    row.onclick = (event) => showPopup(asset.assetName, asset.displaySeatOrTag, event, asset.type);

    let statusClass = "";
    switch ((asset.status || "").toLowerCase()) {
      case "available": statusClass = "status-available"; break;
      case "assigned": statusClass = "status-assigned"; break;
      case "marked for survey": statusClass = "status-marked-for-survey"; break;
      case "in repair": statusClass = "status-in-repair"; break;
      case "damaged": statusClass = "status-in-repair"; break;
    }

    const isSoftware = String(asset.type || "").toLowerCase() === "software";

    // Build 4th column content:
    let fourthCellHtml = "";
    if (isSoftware) {
      const used = asset.licenseSeatsUsed ?? null;
      const total = asset.licenseTotalSeats ?? null;

      if (used !== null && total !== null) {
        const full = total > 0 && used >= total;
        const seatClass = full ? "status-assigned" : "status-available";
        fourthCellHtml = `<span class="status-badge ${seatClass}">${used} / ${total}</span>`;
      } else {
        // Fallback to status if seats not supplied
        const sc = statusClassFor(asset.status);
        fourthCellHtml = `<span class="status-badge ${sc}">${asset.status ?? ""}</span>`;
      }
    } else {
      const sc = statusClassFor(asset.status);
      fourthCellHtml = `<span class="status-badge ${sc}">${asset.status ?? ""}</span>`;
    }

    const isArchived = asset.isArchived === true || (asset.status || "").toLowerCase().includes("archived");

    let adminButtons = "";
    if (IS_ADMIN) {
      const editButton = makeEditButton(asset);
      const archiveButton = isArchived ? makeUnarchiveButton(asset) : makeArchiveButton(asset);
      adminButtons = editButton + archiveButton;
    }

    row.innerHTML = `
      <td>${asset.assetName ?? ""}</td>
      <td>${asset.type ?? ""}</td>
      <td>
        <span onclick="showPopup('${asset.assetName}', '${asset.displaySeatOrTag}', event, '${asset.type}')" style="cursor:pointer;">
    ${asset.displaySeatOrTag}
  </span>

      </td>
      <td>${fourthCellHtml}</td>
      <td class="actions-cell text end" onclick="event.stopPropagation()">
        ${adminButtons}
      </td>
    `;
    tbody.appendChild(row);
  }
  function showPopup(assetName, seatOrTag, event, type) {

    const popup = document.getElementById("popup");
    const rect = event.target.getBoundingClientRect();
    const label = (type?.toLowerCase().includes("software") ? "Seat Number" : "Tag Number");
    popup.style.top = (rect.top + window.scrollY + 20) + "px";
    popup.style.left = (rect.left + window.scrollX + 20) + "px";
    popup.innerHTML = `
      <strong>Asset Name:</strong> ${escapeHtml(assetName ?? "")}<br>
      <strong>${label}:</strong> ${escapeHtml(seatOrTag ?? "")}<br>
    `;

    popup.style.display = "block";
    popup.setAttribute("aria-hidden", "false");
    event.stopPropagation();
  }

  document.addEventListener("click", function (event) {
    const popup = document.getElementById("popup");
    if (popup && popup.style.display === "block" && !popup.contains(event.target)) {
      popup.style.display = "none";
      popup.setAttribute("aria-hidden", "true");
    }
  });
  async function archiveAsset(id, name, type) {
    if (!id) return;
    const confirm = window.confirm(`Are you sure you want to archive "${name}"? `);
    if (!confirm) return;

    const isSoftware = (type || "").toLowerCase() === "software";
    const url = isSoftware
      ? `/api/software/archive/${id}`
      : `/api/hardware/archive/${id}`;

    try {
      const data = await aimsFetch(url, {
        method: "PUT"
      });
      console.log("Archived:", data);
      alert(`"${name}" was successfully archived.`);

      UpdateRowInUIAndCache(data);
    } catch (err) {
      console.error("Error archiving asset:", err); //debugging errors for now. will change later
      alert(`Failed to archive "${name}".`);
    }
  }

  async function unarchiveAsset(id, name, type) {
    if (!id) return;
    const confirm = window.confirm(`Are you sure you want to unarchive "${name}"? `);
    if (!confirm) return;

    const isSoftware = !!softwareID;
    const endpoint = isSoftware
      ? `/api/software/unarchive/${id}`
      : `/api/hardware/unarchive/${id}`;
    console.log("Unarchive type check:", { id, name, type });

    try {
      const updated = await aimsFetch(endpoint, {
        method: "PUT",
        ttl: 0 // don't cache
      });


      console.log("Unarchived:", updated);
      alert(`"${name}" was successfully unarchived.`);

      UpdateRowInUIAndCache(updated);
    } catch (err) {
      console.error("Error unarchiving asset:", err); //debugging errors for now. will change later to look more clean
      if (err.isValidation && err.data) {
        showServerErrorsInline(err.data);
      } else {
        alert(`Failed to unarchive "${name}".`);
      }
    }
  }

  // ---------------- Load updated row in UI by accessing paged cache ----------------

  async function UpdateRowInUIAndCache(update) {
    const id = update.hardwareID || update.softwareID;
    const items = pageCache.get(currentPage) || [];

    // if we are viewing only a single asset
    const urlParams = new URLSearchParams(window.location.search);
    const tag = urlParams.get("tag");
    if (tag) {
      clearTable();
      renderRow(update);
      pager.hidden = true;
      return;
    }

    // otherwise we re-render the current page and update the item in the cache
    if (items) {
      const index = items.findIndex(a => (a.hardwareID || a.softwareID) === id);
      if (index !== -1) {
        items[index] = update;
        renderRows(items); // hits the current paged cache and re-renders to avoid hitting db
        return;
      }
    }
    //if we reach here we just reload the current page
    const currentCategory = getCurrentCategory();
    pageCache.clear();
    loadCategoryPaged(currentCategory, currentPage);

  }

  // ---------------- Startup routing ----------------
  document.addEventListener("DOMContentLoaded", async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tag = urlParams.get("tag");
    const source = (urlParams.get("source") || "").toLowerCase(); // "card" when clicked from cards
    const category = getCurrentCategory();

    const th = document.getElementById("seatOrTagHeader");
    if (th) {
      th.textContent = (category.toLowerCase().includes("software") ? "Seat #" : "Tag #");
    }

    if (tag) {
      await loadOneByTag(tag);
      return;
    }
    // From a card → show page 1 and expose pager (look-ahead)
    if (source === "card") {
      await loadCategoryPaged(category, 1);
      return;
    }
    // Otherwise, leave empty
    // Still set header based on the URL/category if present
    setStatusHeaderFor(normalizeCategory(category) === 'software');
    clearTable();
    applyEmpty(true);
    pager.hidden = true;
  });

</script> *@
@section Scripts {
  <script src="~/js/Utilities/aimsFetch.js" asp-append-version="true"></script>
  <script src="~/js/components/edit-asset.js" asp-append-version="true"></script>
  <script>
    // Share specs with JS for the popup
    const specsData = @Html.Raw(Json.Serialize(ViewData["SpecsData"]));
    // Make the server category available to all functions BEFORE they run.
    const SERVER_CATEGORY = '@(ViewData["Category"] ?? "")';
    const IS_ADMIN = @(User.IsAdmin().ToString().ToLower());
  </script>
}