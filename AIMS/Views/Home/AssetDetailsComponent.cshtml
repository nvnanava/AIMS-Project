@await Html.PartialAsync("_AssetAddForm")
@await Html.PartialAsync("_EditAssetForm")
@await Html.PartialAsync("_AddCategoryForm")
@await Html.PartialAsync("_SoftwareAddForm")

@section Styles {
  <link rel="stylesheet" href="~/css/AssetDetailsComponent.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetButton.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetAddForm.css" asp-append-version="true" />
}

@{
  var category = ViewData["Category"]?.ToString() ?? "Unknown";
  ViewData["Title"] = $"{category} Asset Details";
}
<script>
  // Share specs with JS for the popup
  const specsData = @Html.Raw(Json.Serialize(ViewData["SpecsData"]));
</script>

<h2 class="text-center my-4">@ViewData["Title"]</h2>

<div class="table-wrapper" style="position: relative; width: fit-content; margin: 0 auto;padding: 30px;">
  <table class="asset-table">
    <thead>
      <tr>
        <th>Asset Name</th>
        <th>Type</th>
        <th>Tag #</th>
        <th>Status</th>
        <th>
          <div style="margin-left: auto;">
          @if (User.IsAdmin()) { // Only show the Add button to admins
             @await Html.PartialAsync("_AssetButton")
             }
          </div>
        </th>
      </tr>
    </thead>
    <tbody id="assetTableBody">
      <!-- Filled dynamically -->
    </tbody>
  </table>
</div>

<p id="emptyMessage" class="text-center" style="display:none;">
  No assets found for <strong>@category</strong>.
</p>

<div id="popup" style="
    display: none;
    position: fixed;
    background: white;
    padding: 12px 16px;
    border: 1.5px solid #ccc;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    font-size: 0.85rem;
    max-width: 220px;
    width: max-content;
    word-wrap: break-word;
    line-height: 1.4;
    z-index: 1000;">
</div>

<script>
  // --- Safety: only allow known categories to be used in the API call ---
const ALLOWED_TYPES = new Set(["monitor","laptop","desktop","software","headset","charging cable"]);
function normalizeCategory(raw) {
  const c = String(raw || "").trim().toLowerCase();
  // normalize plurals commonly used in cards
  const map = { monitors:"monitor", laptops:"laptop", desktops:"desktop", headsets:"headset", softwares:"software" };
  return (map[c] || c);
}

// Paged category loader (used only when arriving from cards)
async function loadAssetsPaged(category, { maxPages = 2, pageSize = 50 } = {}) {
  const safe = normalizeCategory(category);
  if (!safe) return;

  const tbody = document.getElementById("assetTableBody");
  const emptyMsg = document.getElementById("emptyMessage");
  tbody.innerHTML = "";
  emptyMsg.style.display = "none";

  let page = 1;
  let receivedAny = false;

  while (page <= maxPages) {
    const url = new URL("/api/assets", window.location.origin);
    url.searchParams.set("page", String(page));
    url.searchParams.set("pageSize", String(pageSize));
    // server param is "types", client category is a single value
    url.searchParams.set("types", safe);
    url.searchParams.set("scope", "all");
    url.searchParams.set("devBypass", "true");
    if (safe) url.searchParams.set("types", safe);

    try {
      const res = await fetch(url.toString(), { cache: "no-store" });
      if (!res.ok) throw new Error(`Failed page ${page}: ${res.status}`);
      const data = await res.json();

      const items = Array.isArray(data.items) ? data.items : [];
      if (items.length === 0 && !receivedAny) {
        emptyMsg.style.display = "block";
        break;
      }

      items.forEach(renderRow);
      receivedAny = receivedAny || items.length > 0;

      // stop early if last page is smaller than pageSize
      if (items.length < pageSize) break;
      page++;
    } catch (err) {
      console.error(err);
      if (!receivedAny) {
        tbody.innerHTML = "";
        emptyMsg.style.display = "block";
      }
      break;
    }
  }
}

  // Optional: flip to false if we'd rather show an error instead of auto-fixing.
  const AUTO_FIX_CATEGORY = true;

  function getCurrentCategory() {
    const urlParams = new URLSearchParams(window.location.search);
    // Razor sets @category; fallback to URL if present
    return (urlParams.get("category") || "@category").trim();
  }

  function redirectToCorrectCategory(correctCategory, tag) {
    const url = new URL('/Home/AssetDetailsComponent', window.location.origin);
    url.searchParams.set('category', correctCategory);
    url.searchParams.set('tag', tag);
    // replace() avoids creating a back-button dead-end
    window.location.replace(url.toString());
  }

  function showCategoryMismatchError(expected, actual) {
    const msg = document.createElement('div');
    msg.style.cssText = `
      margin: 12px auto; max-width: 720px; padding: 12px 14px;
      border: 1px solid #e67e22; background:#fff7ec; color:#8c4b00;
      border-radius: 8px; font-size: 14px;
    `;
    msg.innerHTML = `
      <strong>Wrong page for this asset.</strong><br/>
      You’re viewing the <em>${escapeHtml(actual)}</em> page, but tag belongs to <em>${escapeHtml(expected)}</em>.
      Please switch to the correct category or use the search again.
    `;
    document.body.prepend(msg);
  }

  async function loadOneByTag(tag) {
    try {
      // devBypass=true for local testing; drop it when real RBAC is enforced
      const res = await fetch(`/api/assets/one?tag=${encodeURIComponent(tag)}&devBypass=true`, { cache: "no-store" });
      if (!res.ok) throw new Error(`Failed to load asset (${res.status})`);
      const asset = await res.json();

      // --- Guard: category <> asset.type? ---
      const currentCategory = getCurrentCategory();
      const assetCategory = (asset.type || "").trim();

      if (assetCategory && currentCategory &&
        assetCategory.toLowerCase() !== currentCategory.toLowerCase()) {
        if (AUTO_FIX_CATEGORY) {
          // Auto-correct the URL to match the asset’s real category
          redirectToCorrectCategory(assetCategory, asset.tag || tag);
          return; // stop; page will reload on the correct route
        } else {
          // Don’t auto-redirect; warn the user and still render the row
          showCategoryMismatchError(assetCategory, currentCategory);
        }
      }

      // --- Normal render ---
      const tbody = document.getElementById("assetTableBody");
      const emptyMsg = document.getElementById("emptyMessage");
      tbody.innerHTML = "";
      emptyMsg.style.display = "none";
      renderRow(asset);

    } catch (err) {
      console.error(err);
      document.getElementById("assetTableBody").innerHTML = "";
      document.getElementById("emptyMessage").style.display = "block";
    }
  }

  function escapeHtml(s) {
    return String(s ?? "").replace(/[&<>"']/g, c => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
  }

  document.addEventListener("DOMContentLoaded", () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tag = urlParams.get("tag");
    const category = urlParams.get("category") || "@category";
    const source = (urlParams.get("source") || "").toLowerCase(); // "card" when clicked from cards

    if (tag) {
      // Arrived from search row → fetch only that asset (no category paging)
      loadOneByTag(tag); // will auto-fix category if needed
      return;
    }

    // Only query the category (paged) when explicitly coming from a card click
    if (source === "card") {
      loadAssetsPaged(category, { maxPages: 2, pageSize: 50 });
      return;
    }

    // Otherwise, don't auto-query; leave the table empty by default
    document.getElementById("assetTableBody").innerHTML = "";
    document.getElementById("emptyMessage").style.display = "block";
  });

  function renderRow(asset) {
    const tbody = document.getElementById("assetTableBody");
    const row = document.createElement("tr");
    row.onclick = (event) => showPopup(asset.assetName, asset.tag, event);

    let statusClass = "";
    switch ((asset.status || "").toLowerCase()) {
      case "available": statusClass = "status-available"; break;
      case "assigned": statusClass = "status-assigned"; break;
      case "marked for survey": statusClass = "status-marked-for-survey"; break;
      case "in repair": statusClass = "status-in-repair"; break;
      case "damaged": statusClass = "status-in-repair"; break;
    }

        row.innerHTML = `
                    <td>${asset.assetName}</td>
                    <td>${asset.type}</td>
                    <td>
                        <span onclick="showPopup('${asset.assetName}', '${asset.tag}', event)" style="cursor:pointer;">
                            ${asset.tag}
                        </span>
                    </td>
                    <td><span class="status-badge ${statusClass}">${asset.status}</span></td>
                    <td class="actions-cell text end" onclick="event.stopPropagation()">
                        <button type="button"
                                class="action-btn blue-pencil"
                                aria-label="Edit ${asset.assetName}"
                                title="Edit asset"
                                data-bs-toggle="modal"
                                data-hardware-id="${asset.hardwareID || ''}"
                                data-software-id="${asset.softwareID || ''}"
                                data-bs-target="#editAssetModal"
                                data-name="${asset.assetName}"
                                data-type="${asset.type}"
                                data-tag="${asset.tag}"
                                data-comments="${asset.comment}"
                                data-status="${asset.status}">
                            <svg viewBox="0 0 16 16" width="16" height="16" class="pencil-svg" aria-hidden="true">
                            <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3z"></path>
                            <path d="M.146 13.854a.5.5 0 0 0 .168.11l4.39 1.464a.5.5 0 0 0 .498-.13l9-9L10.5 1.793l-9 9a.5.5 0 0 0-.13.498L.854 15.854a.5.5 0 0 0-.708-.708L.146 13.854z"></path>
                            </svg>
                        </button>
                    </td>
                `;

    tbody.appendChild(row);
  }

  function showPopup(assetName, tagNumber, event) {
    const popup = document.getElementById("popup");
    const rect = event.target.getBoundingClientRect();
    popup.style.top = (rect.top + window.scrollY + 20) + "px";
    popup.style.left = (rect.left + window.scrollX + 20) + "px";

    popup.innerHTML = `
      <strong>Asset Name:</strong> ${escapeHtml(assetName ?? "")}<br>
      <strong>Tag Number:</strong> ${escapeHtml(tagNumber ?? "")}<br>
    `;

    popup.style.display = "block";
    popup.setAttribute("aria-hidden", "false");
    event.stopPropagation();
  }

  document.addEventListener("click", function (event) {
    const popup = document.getElementById("popup");
    if (popup && popup.style.display === "block" && !popup.contains(event.target)) {
      popup.style.display = "none";
      popup.setAttribute("aria-hidden", "true");
    }
  });

  function escapeHtml(s) {
    return String(s ?? "").replace(/[&<>"']/g, c => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
  }

</script>