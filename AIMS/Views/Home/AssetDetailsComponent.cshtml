@using AIMS.Utilities
@await Html.PartialAsync("_AssetAddForm")
@await Html.PartialAsync("_EditAssetForm")
@await Html.PartialAsync("_AddCategoryForm")
@await Html.PartialAsync("_SoftwareAddForm")

@section Styles {
  <link rel="stylesheet" href="~/css/AssetDetailsComponent.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetButton.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/_AssetAddForm.css" asp-append-version="true" />
}

@{
  var category = ViewData["Category"]?.ToString() ?? "Unknown";
  ViewData["Title"] = $"{category} Asset Details";
}

<script>
  // Share specs with JS for the popup
  const specsData = @Html.Raw(Json.Serialize(ViewData["SpecsData"]));

  // Make the server category available to all functions BEFORE they run.
  const SERVER_CATEGORY = '@(ViewData["Category"] ?? "")';
</script>

<h2 class="text-center my-4">@ViewData["Title"]</h2>

<div class="table-wrapper" style="position: relative; width: fit-content; margin: 0 auto;padding: 30px;">
  <table class="asset-table">
    <thead>
      <tr>
        <th>Asset Name</th>
        <th>Type</th>
        <th>Tag #</th>
        <th>Status</th>
        <th>
          <div style="margin-left: auto;">
          @if (User.IsAdmin()) { // Only show the Add button to admins
             @await Html.PartialAsync("_AssetButton")
             }
          </div>
        </th>
      </tr>
    </thead>
    <tbody id="assetTableBody">
      <!-- Filled dynamically -->
    </tbody>
  </table>

  <!-- Look-ahead pager -->
  <div id="asset-pager" class="search-pager" hidden>
    <button type="button" id="asset-prev" class="pager-btn">Prev</button>
    <span id="asset-status" class="pager-status"></span>
    <button type="button" id="asset-next" class="pager-btn">Next</button>
  </div>
</div>

<p id="emptyMessage" class="text-center" style="display:none;">
  No assets found for <strong>@category</strong>.
</p>

<div id="popup" style="
    display: none;
    position: fixed;
    background: white;
    padding: 12px 16px;
    border: 1.5px solid #ccc;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    font-size: 0.85rem;
    max-width: 220px;
    width: max-content;
    word-wrap: break-word;
    line-height: 1.4;
    z-index: 1000;">
</div>

<script>
  // --- Safety: only allow known categories to be used in the API call ---
  const ALLOWED_TYPES = new Set(["monitor","laptop","desktop","software","headset","charging cable"]);
  function normalizeCategory(raw) {
    const c = String(raw || "").trim().toLowerCase();
    const map = { monitors:"monitor", laptops:"laptop", desktops:"desktop", headsets:"headset", softwares:"software" };
    return (map[c] || c);
  }

  // ---------------- Look-ahead pager state (client cache) ----------------
  let currentPage = 1;
  let pageSize = 50;                 // default for details; adjust freely
  const pageCache = new Map();       // pageNumber -> AssetRowVm[]
  let lastMeta = { total: -1, page: 1, pageSize: 50 }; // total:-1 => look-ahead
  const pager = document.getElementById('asset-pager');
  const btnPrev = document.getElementById('asset-prev');
  const btnNext = document.getElementById('asset-next');
  const lblStatus = document.getElementById('asset-status');

  // ---------------- Helpers ----------------
  function applyEmpty(isEmpty) {
    document.getElementById("emptyMessage").style.display = isEmpty ? "block" : "none";
  }
  function clearTable() {
    const tbody = document.getElementById("assetTableBody");
    tbody.innerHTML = "";
  }
  function renderRows(rows) {
    clearTable();
    const tbody = document.getElementById("assetTableBody");
    (rows || []).forEach(renderRow);
  }
  function updatePager(items) {
    if (!pager || !btnPrev || !btnNext || !lblStatus) return;
    const total = lastMeta?.total ?? -1;
    const page = currentPage;
    const size = lastMeta?.pageSize ?? pageSize;

    let hasNext, totalPages;
    if (total === -1) {
      // Look-ahead: if we got a full page, there might be more
      hasNext = (items.length === size);
      totalPages = page + (hasNext ? 1 : 0);   // display hint only
      lblStatus.textContent = `Page ${page}`;
    } else {
      totalPages = Math.max(1, Math.ceil(total / size));
      hasNext = page < totalPages;
      lblStatus.textContent = `Page ${page} of ${totalPages}`;
    }
    const hasPrev = page > 1;
    btnPrev.disabled = !hasPrev;
    btnNext.disabled = !hasNext;
    pager.hidden = (page === 1 && items.length === 0);
  }

  // ---------------- Fetch one page (uses look-ahead & caches) ----------------
  async function getPage(category, page, size) {
    // Cache first
    if (pageCache.has(page)) {
      const items = pageCache.get(page) || [];
      lastMeta.page = page;
      lastMeta.pageSize = size;
      return { items, total: lastMeta.total, page, pageSize: size };
    }

    const safe = normalizeCategory(category);
    if (!ALLOWED_TYPES.has(safe)) return { items: [], total: 0, page, pageSize: size };

    const url = new URL("/api/assets", window.location.origin);
    url.searchParams.set("page", String(page));
    url.searchParams.set("pageSize", String(size));
    url.searchParams.set("category", safe);
    url.searchParams.set("scope", "all");
    // IMPORTANT: tell server we want look-ahead behavior
    url.searchParams.set("totalsMode", "lookahead");

    const res = await fetch(url.toString(), { cache: "no-store" });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const data = await res.json();

    // Expecting: { items, total, page, pageSize } where total == -1 means "there is/was another page"
    const items = Array.isArray(data.items) ? data.items : [];
    pageCache.set(page, items);
    lastMeta = { total: (typeof data.total === "number" ? data.total : -1), page: data.page || page, pageSize: data.pageSize || size };
    return { items, total: lastMeta.total, page: lastMeta.page, pageSize: lastMeta.pageSize };
  }

  // ---------------- Category page loader (pager-driven) ----------------
  async function loadCategoryPaged(category, page = 1) {
    try {
      const { items } = await getPage(category, page, pageSize);
      currentPage = page;
      renderRows(items);
      applyEmpty(items.length === 0 && page === 1);
      updatePager(items);
    } catch (err) {
      console.error(err);
      clearTable();
      applyEmpty(true);
      updatePager([]);
    }
  }

  // ---------------- Single by tag (unchanged) ----------------
  async function loadOneByTag(tag) {
    try {
      const res = await fetch(`/api/assets/one?tag=${encodeURIComponent(tag)}&devBypass=true`, { cache: "no-store" });
      if (!res.ok) throw new Error(`Failed to load asset (${res.status})`);
      const asset = await res.json();

      const currentCategory = getCurrentCategory();
      const assetCategory = (asset.type || "").trim();
      if (assetCategory && currentCategory &&
          assetCategory.toLowerCase() !== currentCategory.toLowerCase()) {
        if (AUTO_FIX_CATEGORY) {
          redirectToCorrectCategory(assetCategory, asset.tag || tag);
          return;
        } else {
          showCategoryMismatchError(assetCategory, currentCategory);
        }
      }

      clearTable();
      applyEmpty(false);
      renderRow(asset);
      // Hide pager for single-asset path
      pager.hidden = true;
    } catch (err) {
      console.error(err);
      clearTable();
      applyEmpty(true);
      pager.hidden = true;
    }
  }

  // ---------------- Wire up pager buttons ----------------
  if (btnPrev) btnPrev.addEventListener('click', async () => {
    if (currentPage > 1) {
      const category = getCurrentCategory();
      await loadCategoryPaged(category, currentPage - 1);
    }
  });
  if (btnNext) btnNext.addEventListener('click', async () => {
    const category = getCurrentCategory();
    await loadCategoryPaged(category, currentPage + 1);
  });

  // ---------------- Boot ----------------
  const AUTO_FIX_CATEGORY = true;
  function getCurrentCategory() {
    const urlParams = new URLSearchParams(window.location.search);
    return (urlParams.get("category") || SERVER_CATEGORY|| "").trim();
  }
  function redirectToCorrectCategory(correctCategory, tag) {
    const url = new URL('/Home/AssetDetailsComponent', window.location.origin);
    url.searchParams.set('category', correctCategory);
    url.searchParams.set('tag', tag);
    window.location.replace(url.toString());
  }
  function showCategoryMismatchError(expected, actual) {
    const msg = document.createElement('div');
    msg.style.cssText = `
      margin: 12px auto; max-width: 720px; padding: 12px 14px;
      border: 1px solid #e67e22; background:#fff7ec; color:#8c4b00;
      border-radius: 8px; font-size: 14px;
    `;
    msg.innerHTML = `
      <strong>Wrong page for this asset.</strong><br/>
      Youâ€™re viewing the <em>${escapeHtml(actual)}</em> page, but tag belongs to <em>${escapeHtml(expected)}</em>.
      Please switch to the correct category or use the search again.
    `;
    document.body.prepend(msg);
  }
  function escapeHtml(s) {
    return String(s ?? "").replace(/[&<>"']/g, c => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    }[c]));
  }
  function renderRow(asset) {
    const tbody = document.getElementById("assetTableBody");
    const row = document.createElement("tr");
    row.onclick = (event) => showPopup(asset.assetName, asset.tag, event);
    let statusClass = "";
    switch ((asset.status || "").toLowerCase()) {
      case "available": statusClass = "status-available"; break;
      case "assigned": statusClass = "status-assigned"; break;
      case "marked for survey": statusClass = "status-marked-for-survey"; break;
      case "in repair": statusClass = "status-in-repair"; break;
      case "damaged": statusClass = "status-in-repair"; break;
    }
    row.innerHTML = `
      <td>${asset.assetName}</td>
      <td>${asset.type}</td>
      <td>
        <span onclick="showPopup('${asset.assetName}', '${asset.tag}', event)" style="cursor:pointer;">
          ${asset.tag}
        </span>
      </td>
      <td><span class="status-badge ${statusClass}">${asset.status}</span></td>
      <td class="actions-cell text end" onclick="event.stopPropagation()">
        @if (User.IsAdmin())
        {
          <button type="button"
                  class="action-btn blue-pencil"
                  aria-label="Edit ${asset.assetName}"
                  title="Edit asset"
                  data-bs-toggle="modal"
                  data-hardware-id="${asset.hardwareID || ''}"
                  data-software-id="${asset.softwareID || ''}"
                  data-bs-target="#editAssetModal"
                  data-name="${asset.assetName}"
                  data-type="${asset.type}"
                  data-tag="${asset.tag}"
                  data-comments="${asset.comment}"
                  data-status="${asset.status}">
            <svg viewBox="0 0 16 16" width="16" height="16" class="pencil-svg" aria-hidden="true">
              <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3z"></path>
              <path d="M.146 13.854a.5.5 0 0 0 .168.11l4.39 1.464a.5.5 0 0 0 .498-.13l9-9L10.5 1.793l-9 9a.5.5 0 0 0-.13.498L.854 15.854a.5.5 0 0 0-.708-.708L.146 13.854z"></path>
            </svg>
          </button>
        }
      </td>
    `;
    tbody.appendChild(row);
  }
  function showPopup(assetName, tagNumber, event) {
    const popup = document.getElementById("popup");
    const rect = event.target.getBoundingClientRect();
    popup.style.top = (rect.top + window.scrollY + 20) + "px";
    popup.style.left = (rect.left + window.scrollX + 20) + "px";
    popup.innerHTML = `
      <strong>Asset Name:</strong> ${escapeHtml(assetName ?? "")}<br>
      <strong>Tag Number:</strong> ${escapeHtml(tagNumber ?? "")}<br>
    `;
    popup.style.display = "block";
    popup.setAttribute("aria-hidden", "false");
    event.stopPropagation();
  }
  document.addEventListener("click", function (event) {
    const popup = document.getElementById("popup");
    if (popup && popup.style.display === "block" && !popup.contains(event.target)) {
      popup.style.display = "none";
      popup.setAttribute("aria-hidden", "true");
    }
  });

  // ---------------- Startup routing ----------------
  document.addEventListener("DOMContentLoaded", async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const tag = urlParams.get("tag");
    const source = (urlParams.get("source") || "").toLowerCase(); // "card" when clicked from cards
    const category = getCurrentCategory();

    if (tag) {
      await loadOneByTag(tag);
      return;
    }
    // From a card â†’ show page 1 and expose pager (look-ahead)
    if (source === "card") {
      await loadCategoryPaged(category, 1);
      return;
    }
    // Otherwise, leave empty
    clearTable();
    applyEmpty(true);
    pager.hidden = true;
  });
</script>