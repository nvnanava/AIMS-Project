


@{
    ViewData["Title"] = "Reports";


    // Define Table Headers
    var tableHeaders = new List<string> { "Name", "Type", "Description","Office", "Date Created"};


    // Define User Table Headers
    var userHeaders = new List<string> { "Name", "Email", "Role", "Asset", "Status"};

    // Define User Table Data
    var userData = new List<Dictionary<string, string>> {
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Lenovo ThinkPad E16"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Dell S2421NX"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Logitech Zone 300"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Lenovo IdeaCentre 3"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Microsoft 365 Business"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "HP 527SH"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Samsung Galaxy Book4"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Logitech Zone Vibe 100"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Belkin BoostCharge 3.3ft USB-C"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Dell Inspirion 3030"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Samsung Galaxy Book4"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "Belkin BoostCharge 3.3ft USB-C"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Name", "John Smith"},
            {"Email", "Jsmith@email.com"}, {"Role", "Admin"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} }
    };

    // Define Office Table Headers
    var officeHeaders = new List<string> { "Office", "Asset", "Status"};

    // Define Office Table Data
    var officeData = new List<Dictionary<string, string>> {
        new Dictionary<string, string> { {"Office", "10"},
            {"Asset", "Lenovo Thinkpad E16"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "31"},
            {"Asset", "Dell S2421NX"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Office", "14"},
            {"Asset", "Logitech Zone 300"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "28"},
            {"Asset", "Lenovo IdeaCentre 3"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "14"},
            {"Asset", "Microsoft 365 Business"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "26"},
            {"Asset", "HP 527SH"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "13"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Office", "21"},
            {"Asset", "Samsung Galaxy Book4"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "28"},
            {"Asset", "Logitech Zone Vibe 100"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Office", "29"},
            {"Asset", "Belkin BoostCharge 3.3ft USB-C"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "46"},
            {"Asset", "Dell Inspirion 3030"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "51"},
            {"Asset", "Samsung Galaxy Book4"}, {"Status", "Active"} },
        new Dictionary<string, string> { {"Office", "38"},
            {"Asset", "Belkin BoostCharge 3.3ft USB-C"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Office", "21"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} },
        new Dictionary<string, string> { {"Office", "42"},
            {"Asset", "HP Pavilion TP01-2234"}, {"Status", "Inactive"} }
    };

    // Define Asset Table Headers
    var assetHeaders = new List<string> { "Asset Name", "Type", "Tag #", "Assigned To", "Status"};

    // Define Asset Table Data
    var assetData = new List<Dictionary<string, string>> {
        new Dictionary<string, string> { {"Asset Name", "Lenovo ThinkPad E16"},
            {"Type", "Laptop"}, {"Tag #", "LT-0020"},
            {"Assigned To", "John Smith"}, {"Status", "Damaged"} },
        new Dictionary<string, string> { {"Asset Name", "Dell S2421NX"},
            {"Type", "Laptop"}, {"Tag #", "MN-0001"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "Logitech Zone 300"},
            {"Type", "Headphone"}, {"Tag #", "HS-0080"},
            {"Assigned To", "Unassigned"}, {"Status", "Available"} },
        new Dictionary<string, string> { {"Asset Name", "Lenovo IdeaCentre 3"},
            {"Type", "Laptop"}, {"Tag #", "DT-0011"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "Microsoft 365 Business"},
            {"Type", "Laptop"}, {"Tag #", "SW-0100"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "HP 527SH"},
            {"Type", "Laptop"}, {"Tag #", "MN-0023"},
            {"Assigned To", "Unassigned"}, {"Status", "Damaged"} },
        new Dictionary<string, string> { {"Asset Name", "HP Pavilion TP01-2234"},
            {"Type", "Laptop"}, {"Tag #", "DT-0075"},
            {"Assigned To", "John Smith"}, {"Status", "Due Soon"} },
        new Dictionary<string, string> { {"Asset Name", "Logitech Zone Vibe 100"},
            {"Type", "Monitor"}, {"Tag #", "HS-0015"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "Belkin BoostCharge 3.3ft USB-C"},
            {"Type", "Keyboard"}, {"Tag #", "CC-0088"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "Dell Inspirion 3030"},
            {"Type", "Mouse"}, {"Tag #", "SW-0100"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "Samsung Galaxy Book4"},
            {"Type", "Monitor"}, {"Tag #", "MN-0023"},
            {"Assigned To", "Unassigned"}, {"Status", "Available"} },
        new Dictionary<string, string> { {"Asset Name", "Belkin BoostCharge 3.3ft  USB-C"},
            {"Type", "Laptop"}, {"Tag #", "DT-0075"},
            {"Assigned To", "John Smith"}, {"Status", "In Repair"} },
        new Dictionary<string, string> { {"Asset Name", "HP Pavilion TP01-2234"},
            {"Type", "Laptop"}, {"Tag #", "LT-0005"},
            {"Assigned To", "John Smith"}, {"Status", "Assigned"} },
        new Dictionary<string, string> { {"Asset Name", "HP Pavilion TP01-2234"},
            {"Type", "Laptop"}, {"Tag #", "HS-0015"},
            {"Assigned To", "John Smith"}, {"Status", "In Repair"} }
    };

}
<body style="background-color:#ECF0F1;">

    <style>
        body {
            overflow-y: scroll;
        }

        .report-page-size {
            width: 95%;
            margin: 0 auto 20px auto;
        }

        /* Report Management Section */
        .report-management {
            width: 100%;
            height: auto;
            background-color: #FFFFFF;
            margin: 0 auto 20px auto;
            overflow: visible;
        }

        /* Report Header */
        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            height: 50px;
            padding: 0px 5px 0px 20px;
            margin: 0;
        }

        .report-header .left-section {
            display: flex;
            align-items: center;
        }

        .report-header .right-section {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Search Bar */
        .search-container {
            display: flex;
            align-items: center;
            width: 300px;
            height: 41px;
            background-color: #ecf0f1;
            border: 2px solid transparent;
            border-radius: 20px;
            padding: 5px 12px;
        }

        .search-input {
            flex: 1;
            background-color: transparent;
            text-align: start;
            border: none;
            outline: none;
            padding: 0px;
        }


        /* View Download CSV and New Report Button */
        .download-csv-button, .new-report-button {
            height: 41px;
            padding: 0px 16px;
            color: #34495e;
            line-height: normal;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }

        .new-report-button {
            margin-left: auto;
            margin-inline-end: 10px;
            writing-mode: horizontal-tb;
        }


/* --- Responsive Table Layout --- */
.table-container {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    border-radius: 8px;
    background: #ffffff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.08);
    margin-top: 0.5rem;
    position: relative;
}

/* Make sure the table fits screen width and scrolls cleanly */
.report-table {
    width: 100%;
    min-width: 700px;
    border-collapse: collapse;
    table-layout: auto;
}

/* Auto-fit and prevent text clipping */
.report-table th,
.report-table td {
    padding: 12px 14px;
    text-align: left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Narrow first column for checkbox */
.report-table th:first-child,
.report-table td:first-child {
    width: 40px;
    min-width: 40px;
}

/* Sticky header on scroll */
.report-table thead {
    position: sticky;
    top: 0;
    background: #CFDCDF;
    z-index: 5;
}

        /*Updated column widths to account for Office*/
        .report-table th:nth-child(1),
        .report-table td:nth-child(1) { width: 16px; }


        .report-table th:nth-child(2),
        .report-table td:nth-child(2) { width: 122px; }


        .report-table th:nth-child(3),
        .report-table td:nth-child(3) { width: 145px; }


        .report-table th:nth-child(4),
        .report-table td:nth-child(4) { width: 265px; }


        .report-table th:nth-child(5),
        .report-table td:nth-child(5) { width: 120px; }


        .report-table th:nth-child(6),
        .report-table td:nth-child(6) { width: 118px; }


        .report-table th {
            height: 55px;
            color: #34495e;
        }

        .report-table thead {
            position: sticky;
            top: 0;
            background-color: #CFDCDF;
            border-radius: 5px;
            z-index: 2;
        }

        .report-table tbody tr {
            border-bottom: 1px solid #999393;
        }



        .other-table {
            table-layout: fixed;
            width: 100%;
            background-color: #FFFFFF;
        }

        .other-table th, .other-table td {
            padding: 12px;
            text-align: left;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .other-table th {
            height: 55px;
            color: #34495e;
        }

        .other-table thead {
            position: sticky;
            top: 0;
            background-color: #CFDCDF;
            border-radius: 5px;
            z-index: 2;
        }

        .other-table tbody tr {
            border-bottom: 1px solid #999393;
        }

        /* Header Titles */
        .header-titles {
            color: #34495e;
            font-size: 18px;
            height: 41px;
            padding: 0px 16px;
            cursor: pointer;
        }

        .modal-dialog.custom-width {
            max-width: 75%;
        }

        .modal-dialog.custom-width-two {
            max-width: 50%;
        }


        /* Status Badges */
        .status {
            padding: 5px 10px;
            border-radius: 20px;
        }

        .status.assigned {
            background-color: #0070ff29;
        }

        .status.available {
            background-color: #9df299;
        }

        .status.damaged {
            background-color: #ff000029;
        }

        .status.duesoon {
            background-color: #fff20029;
        }

        .status.overdue {
            background-color: #ff000029;
        }

        .status.inrepair {
            background-color: #fff20029;
        }

        .status.active {
            background-color: #9df299;
        }

        .status.inactive {
            background-color: #6db869;
        }
    </style>



<div class="report-page-size">
    <h1>Reports</h1>
    <div class="report-management">
        <div class="report-header">
            <div class="left-section">
                <div class="search-container">
                    <input type="search" id="reportSearch" class="form-control search-input" placeholder="Search Reports"

                        aria-label="Search" aria-describedby="search-addon">
                </div>
            </div>
            <div class="right-section">

                <button class="download-csv-button">Download CSV of Selected Files</button>
                <div class="dropdown">
                    <button class="btn new-report-button dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                        New Report
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                        <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#generateAssignmentReport">Assignment</button></li>
                        <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#generateOfficeReport">Office</button></li>
                        <button class="dropdown-item" type="button" data-bs-toggle="modal" data-bs-target="#generateCustomReport">Custom</button></li>
                    </ul>
                </div>
            </div>
        </div>
       <div class="table-container table-responsive" style="overflow-x:auto; white-space:nowrap;">
            <table class="report-table">
                <thead>
                    <tr>
                        <th scope="col">
                            <span class="sort-text"></span>
                        </th>
                        @foreach (var header in tableHeaders) {
                            <th scope="col">
                                <span class="sort-text">@header</span>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody id="table-body">
                    <tr><td colspan="@tableHeaders.Count + 1" style="text-align: center;">Loading...</td></tr>
                </tbody>
            </table>
        </div>
    </div>
</div>


<script>
document.addEventListener("DOMContentLoaded", async () => {
    const tableBody = document.getElementById("table-body");

    try {
        const response = await fetch("/api/reports/list"); // Adjust path if your API route differs
        if (!response.ok) throw new Error("Failed to fetch reports");

        const reports = await response.json();

        // Clear loading row
        tableBody.innerHTML = "";

        if (reports.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center;">No reports available</td></tr>`;
            return;
        }

        reports.forEach(report => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td><input class="form-check-input report-checkbox" type="checkbox" data-id="${report.reportID}"></td>
                <td><span class="cell-text">${report.name || "-"}</span></td>
                <td><span class="cell-text">${report.type || "-"}</span></td>
                <td><span class="cell-text">${report.description || "-"}</span></td>
                <td><span class="cell-text">${report.generatedByOfficeString || "-"}</span></td>
                <td><span class="cell-text">${new Date(report.dateCreated).toLocaleString()}</span></td>
            `;
            tableBody.appendChild(row);
        });
    } catch (err) {
        console.error(err);
        tableBody.innerHTML = `<tr><td colspan="6" style="text-align:center;color:red;">Error loading reports</td></tr>`;
    }
});

document.querySelector(".download-csv-button").addEventListener("click", async () => {
    const selectedCheckboxes = document.querySelectorAll(".report-checkbox:checked");

    if (selectedCheckboxes.length === 0) {
        alert("Please select at least one report to download.");
        return;
    }

    for (const checkbox of selectedCheckboxes) {
        const id = checkbox.dataset.id;

        try {
            const response = await fetch(`/download/${id}`);
            if (!response.ok) throw new Error(`Failed to download report ${id}`);

            // Extract filename from Content-Disposition header, or default to something
            const disposition = response.headers.get("Content-Disposition");
            let filename = `report_${id}.csv`;

            if (disposition) {
                // Prefer UTF-8 encoded form if present
                const utf8Match = disposition.match(/filename\*\=UTF-8''([^;]+)/i);
                if (utf8Match) {
                    filename = decodeURIComponent(utf8Match[1]);
                } else {
                    const asciiMatch = disposition.match(/filename="?([^"]+)"?/i);
                    if (asciiMatch) filename = asciiMatch[1];
                }
            }


            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement("a");
            a.href = url;
            a.download = filename;
            a.click();

            window.URL.revokeObjectURL(url);
        } catch (err) {
            console.error(err);
            alert(`Error downloading report ${id}: ${err.message}`);
        }
    }
});

</script>


</body>

<!-- Generate Assignment Report Modal -->
<div class="modal fade" id="generateAssignmentReport" tabindex="-1" aria-labelledby="generateAssignmentReportLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="generateAssignmentReportLabel">Generate an Assignment Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <form class="row g-3" id="assignmentReportForm">
          <div class="col-12">
            <label for="reportName" class="form-label">Report Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="reportName" name="reportName" required>
          </div>
          <div class="col-md-6">
            <label for="dateRange1" class="form-label">Start Date <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="dateRange1" name="dateRange1" required>
          </div>
          <div class="col-md-6">
            <label for="dateRange2" class="form-label">End Date (optional)</label>
            <input type="date" class="form-control" id="dateRange2" name="dateRange2">
          </div>
          <div class="col-12">
            <label for="inputDescription" class="form-label">Description (optional)</label>
            <input type="text" class="form-control" id="inputDescription">
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="generateAssignmentReportBtn">Generate Report</button>
      </div>
    </div>
  </div>
</div>


<script>
document.getElementById("generateAssignmentReportBtn").addEventListener("click", async () => {
  const startDate = document.getElementById("dateRange1").value;
  const endDate = document.getElementById("dateRange2").value;
  const description = document.getElementById("inputDescription").value.trim();
  const reportName = document.getElementById("reportName").value.trim();

  // Use your existing variable
  const CreatorUserID = 1;  

  // Basic validation
  if (!reportName) {
    alert("Please enter a report name.");
    return;
  }
  if (!startDate) {
    alert("Please select a start date.");
    return;
  }

  // Build query params for the API
  const params = new URLSearchParams({
    start: startDate,
    reportName,
    CreatorUserID,
    type: "Assignment"
  });

  if (endDate) params.append("end", endDate);
  if (description) params.append("desc", description);

  try {
    const response = await fetch(`/?${params.toString()}`, {
      method: "POST"
    });

    if (!response.ok) {
      const errText = await response.text();
      console.error("Error:", errText);
      alert("Failed to generate report: " + errText);
      return;
    }

    // Success — you can now refresh the report list, close modal, etc.
    console.log("Report generated successfully!");
    
    // Example: close the modal
    const modal = bootstrap.Modal.getInstance(document.getElementById("generateAssignmentReport"));
    modal.hide();

  } catch (err) {
    console.error("Unexpected error:", err);
    alert("An unexpected error occurred.");
  }
});
</script>


<!-- Generate Office Report Modal -->
<div class="modal fade" id="generateOfficeReport" tabindex="-1" aria-labelledby="generateOfficeReportLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="generateOfficeReportLabel">Generate an Office Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <form class="row g-3" id="officeReportForm">
          <div class="col-12">
            <label for="2reportName" class="form-label">Report Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="2reportName" name="2reportName" required>
          </div>
          <div class="col-12">
            <label for="officeName" class="form-label">Office Number <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="officeName" name="officeName" required>
          </div>
          <div class="col-md-6">
            <label for="2dateRange1" class="form-label">Start Date <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="2dateRange1" name="2dateRange1" required>
          </div>
          <div class="col-md-6">
            <label for="2dateRange2" class="form-label">End Date (optional)</label>
            <input type="date" class="form-control" id="2dateRange2" name="2dateRange2">
          </div>
          <div class="col-12">
            <label for="2inputDescription" class="form-label">Description (optional)</label>
            <input type="text" class="form-control" id="2inputDescription">
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="generateOfficeReportBtn">Generate Report</button>
      </div>
    </div>
  </div>
</div>


<script>
document.getElementById("generateOfficeReportBtn").addEventListener("click", async () => {
  const startDate = document.getElementById("2dateRange1").value;
  const endDate = document.getElementById("2dateRange2").value;
  const description = document.getElementById("2inputDescription").value.trim();
  const reportName = document.getElementById("2reportName").value.trim();
  const OfficeID = document.getElementById("officeName").value.trim();

  // Use your existing variable
  const CreatorUserID = 1;  

  // Basic validation
  if (!reportName) {
    alert("Please enter a report name.");
    return;
  }
  if (!OfficeID) {
    alert("Please select an office number.");
    return;
  }
  if (!startDate) {
    alert("Please select a start date.");
    return;
  }

  // Build query params for the API
  const params = new URLSearchParams({
    start: startDate,
    reportName,
    CreatorUserID,
    type: "Office",
    OfficeID
  });

  if (endDate) params.append("end", endDate);
  if (description) params.append("desc", description);

  try {
    const response = await fetch(`/?${params.toString()}`, {
      method: "POST"
    });

    if (!response.ok) {
      const errText = await response.text();
      console.error("Error:", errText);
      alert("Failed to generate report: " + errText);
      return;
    }

    // Success — you can now refresh the report list, close modal, etc.
    console.log("Report generated successfully!");
    
    // Example: close the modal
    const modal = bootstrap.Modal.getInstance(document.getElementById("generateOfficeReport"));
    modal.hide();

  } catch (err) {
    console.error("Unexpected error:", err);
    alert("An unexpected error occurred.");
  }
});
</script>

<!-- Generate Custom Report Modal -->
<div class="modal fade" id="generateCustomReport" tabindex="-1" aria-labelledby="generateCustomReportLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="generateCustomReportLabel">Generate a Custom Report</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <form class="row g-3" id="customReportForm">
          <div class="col-12">
            <label for="customReportName" class="form-label">Report Name <span class="text-danger">*</span></label>
            <input type="text" class="form-control" id="customReportName" name="customReportName" required>
          </div>

          <div class="col-md-6">
            <label for="customStartDate" class="form-label">Start Date <span class="text-danger">*</span></label>
            <input type="date" class="form-control" id="customStartDate" name="customStartDate" required>
          </div>

          <div class="col-md-6">
            <label for="customEndDate" class="form-label">End Date (optional)</label>
            <input type="date" class="form-control" id="customEndDate" name="customEndDate">
          </div>

          <div class="col-12">
            <label for="customDescription" class="form-label">Description (optional)</label>
            <input type="text" class="form-control" id="customDescription">
          </div>

          <div class="col-12">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="seeHardware" checked>
              <label class="form-check-label" for="seeHardware">See Hardware</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="seeSoftware" checked>
              <label class="form-check-label" for="seeSoftware">See Software</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="seeUsers" checked>
              <label class="form-check-label" for="seeUsers">See Users</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="seeOffice" checked>
              <label class="form-check-label" for="seeOffice">See Office</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="seeExpiration">
              <label class="form-check-label" for="seeExpiration">See when software and/or warranty expires</label>
            </div>
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="filterByMaintenance">
              <label class="form-check-label" for="filterByMaintenance">See what requires maintenance or replacements</label>
            </div>
          </div>
        </form>
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="generateCustomReportBtn">Generate Report</button>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById("generateCustomReportBtn").addEventListener("click", async () => {
  const reportName = document.getElementById("customReportName").value.trim();
  const startDate = document.getElementById("customStartDate").value;
  const endDate = document.getElementById("customEndDate").value;
  const description = document.getElementById("customDescription").value.trim();

  // use your variable for logged-in user
  const CreatorUserID = 1;

  // checkboxes
  const customOptions = {
    seeHardware: document.getElementById("seeHardware").checked,
    seeSoftware: document.getElementById("seeSoftware").checked,
    seeUsers: document.getElementById("seeUsers").checked,
    seeOffice: document.getElementById("seeOffice").checked,
    seeExpiration: document.getElementById("seeExpiration").checked,
    filterByMaintenance: document.getElementById("filterByMaintenance").checked
  };

  // basic validation
  if (!reportName) {
    alert("Please enter a report name.");
    return;
  }
  if (!startDate) {
    alert("Please select a start date.");
    return;
  }

  // build query params
  const params = new URLSearchParams({
    start: startDate,
    reportName,
    CreatorUserID,
    type: "Custom"
  });

  if (endDate) params.append("end", endDate);
  if (description) params.append("desc", description);

  // attach customOptions as JSON
  params.append("customOptions", JSON.stringify(customOptions));

  try {
    const response = await fetch(`/?${params.toString()}`, { method: "POST" });

    if (!response.ok) {
      const errText = await response.text();
      console.error("Error:", errText);
      alert("Failed to generate report: " + errText);
      return;
    }

    console.log("Custom report generated successfully!");
    
    // close modal
    const modal = bootstrap.Modal.getInstance(document.getElementById("generateCustomReport"));
    modal.hide();

    // TODO: refresh report list or update UI here
  } catch (err) {
    console.error("Unexpected error:", err);
    alert("An unexpected error occurred.");
  }
});
</script>


<!-- Modal for Asset Report -->
<div class="modal" id="assetReportModal" tabindex="-1" aria-labelledby="assetReportModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-width">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assetReportModalLabel">Asset Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content for Asset Report -->
                    <div class="table-container table-responsive" style="overflow-x:auto; white-space:nowrap;">
                        <table class="other-table">
                            <thead>
                                <tr>
                                    @foreach (var header in assetHeaders) {
                                        <th scope="col">
                                            <span class="sort-text">@header</span>
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody id="table-body"> <!--class="table-body"-->
                                @if (assetData.Count == 0) {
                                    <tr><td colspan="assetHeaders.Count" style="text-align: center;">No data available</td></tr>
                                } else {
                                    @foreach (var row in assetData) {
                                        <tr>
                                            @foreach (var header in assetHeaders) {
                                                @if (header == "Status") {
                                                    <td><span class="status @row[header].ToLower().Replace(" ", "")">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                } else {
                                                    <td><span class="cell-text">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
    </div>
</div>



<!-- Modal for Custom Report -->
<div class="modal" id="customReportModal" tabindex="-1" aria-labelledby="customReportModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-width">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customReportModalLabel">Custom Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content for Custom Report -->
                    <div class="table-container table-responsive" style="overflow-x:auto; white-space:nowrap;">
                        <table class="other-table">
                            <thead>
                                <tr>
                                    @foreach (var header in assetHeaders) {
                                        <th scope="col">
                                            <span class="sort-text">@header</span>
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody id="table-body"> <!--class="table-body"-->
                                @if (assetData.Count == 0) {
                                    <tr><td colspan="assetHeaders.Count" style="text-align: center;">No data available</td></tr>
                                } else {
                                    @foreach (var row in assetData) {
                                        <tr>
                                            @foreach (var header in assetHeaders) {
                                                @if (header == "Status") {
                                                    <td><span class="status @row[header].ToLower().Replace(" ", "")">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                } else {
                                                    <td><span class="cell-text">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Asset Assignments to Users -->
<div class="modal" id="assetAssignmentsToUsersModal" tabindex="-1" aria-labelledby="assetAssignmentsToUsersModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-width">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assetAssignmentsToUsersModalLabel">Asset Assignments to Users</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content for Asset Assignments to Users -->
                    <div class="table-container table-responsive" style="overflow-x:auto; white-space:nowrap;">
                        <table class="other-table">
                            <thead>
                                <tr>
                                    @foreach (var header in userHeaders) {
                                        <th scope="col">
                                            <span class="sort-text">@header</span>
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody id="table-body"> <!--class="table-body"-->
                                @if (userData.Count == 0) {
                                    <tr><td colspan="userHeaders.Count" style="text-align: center;">No data available</td></tr>
                                } else {
                                    @foreach (var row in userData) {
                                        <tr>
                                            @foreach (var header in userHeaders) {
                                                @if (header == "Status") {
                                                    <td><span class="status @row[header].ToLower().Replace(" ", "")">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                } else {
                                                    <td><span class="cell-text">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Assets Assigned to an Office -->
<div class="modal" id="assetsAssignedToOfficeModal" tabindex="-1" aria-labelledby="assetsAssignedToOfficeModalLabel" aria-hidden="true">
    <div class="modal-dialog custom-width-two">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assetsAssignedToOfficeModalLabel">Assets Assigned to an Office</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Content for Assets Assigned to an Office -->
                    <div class="table-container table-responsive" style="overflow-x:auto; white-space:nowrap;">
                        <table class="other-table">
                            <thead>
                                <tr>
                                    @foreach (var header in officeHeaders) {
                                        <th scope="col">
                                            <span class="sort-text">@header</span>
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody id="table-body"> <!--class="table-body"-->
                                @if (officeData.Count == 0) {
                                    <tr><td colspan="officeHeaders.Count" style="text-align: center;">No data available</td></tr>
                                } else {
                                    @foreach (var row in officeData) {
                                        <tr>
                                            @foreach (var header in officeHeaders) {
                                                @if (header == "Status") {
                                                    <td><span class="status @row[header].ToLower().Replace(" ", "")">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                } else {
                                                    <td><span class="cell-text">@(row.ContainsKey(header) ? row[header] : "-")</span></td>
                                                }
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
            </div>
        </div>
    </div>
</div>

<!-- Report Submitted Message -->
<div class="report-toast-container">
    <div id="reportToast" class="toast report-toast" role="alert" data-bs-autohide="true">
        <div class="d-flex">
            <div class="toast-body">
                Report generated!
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        const searchInput = document.getElementById("reportSearch");
        const tableBody = document.getElementById("table-body");
        const rows = tableBody.getElementsByTagName("tr");
        const noResultsRow = document.getElementById("no-results-row");

        searchInput.addEventListener("input", () => {
            const term = searchInput.value.toLowerCase();
            const rows = tableBody.querySelectorAll("tr");
            let visibleCount = 0;
            rows.forEach(row => {
                const text = row.innerText.toLowerCase();
                row.style.display = text.includes(term) ? "" : "none";
                if (text.includes(term)) visibleCount++;
            });
            document.getElementById("no-results-row")?.remove();
            if (visibleCount === 0) {
                const noResultsRow = document.createElement("tr");
                noResultsRow.id = "no-results-row";
                noResultsRow.innerHTML = `<td colspan="6" style="text-align:center;">No matching results found</td>`;
                tableBody.appendChild(noResultsRow);
            }
        });



        // Add event listener for each name row
        document.addEventListener('DOMContentLoaded', function () {
            const rows = document.querySelectorAll('.report-table tbody tr');

            rows.forEach(function(row) {
                const nameCell = row.querySelector('td:nth-child(2)');
                const typeCell = row.querySelector('td:nth-child(3)');

                nameCell.addEventListener('click', function() {
                    const reportType = typeCell.textContent.trim();
                    let modalId = '';

                    // Determine which modal to show based on the "Type" column
                    switch (reportType) {
                        case 'Asset Report':
                            modalId = '#assetReportModal';
                            break;
                        case 'Custom Report':
                            modalId = '#customReportModal';
                            break;
                        case 'Asset Assignments to Users':
                            modalId = '#assetAssignmentsToUsersModal';
                            break;
                        case 'Assets Assigned to an Office':
                            modalId = '#assetsAssignedToOfficeModal';
                            break;
                        default:
                            break;
                    }

                    // Show the corresponding modal
                    if (modalId) {
                        const modal = new bootstrap.Modal(document.querySelector(modalId));
                        modal.show();
                    }
                });
            });
        });


        // Toast on generate report
        document.addEventListener("DOMContentLoaded", function () {
            const officeReportBtn = document.querySelector("#generateOfficeReport .btn.btn-primary");
            const reportToast = new bootstrap.Toast(document.getElementById("reportToast"), { delay: 3000 });

            officeReportBtn.addEventListener("click", function () {
                reportToast.show();
            });

            const assignmentReportBtn = document.querySelector("#generateAssignmentReport .btn.btn-primary");
            assignmentReportBtn.addEventListener("click", function () {
                reportToast.show();
            });

            const customReportBtn = document.querySelector("#generateCustomReport .btn.btn-primary");
            customReportBtn.addEventListener("click", function () {
                reportToast.show();
            });
        });
    </script>
}

