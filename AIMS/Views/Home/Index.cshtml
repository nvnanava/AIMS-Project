@* ======================================================================
   AIMS View: Home/Index
   ----------------------------------------------------------------------
   Purpose
   - Landing page showing asset category cards with pagination.
   - Loads Dashboard Settings modal and hydrates summary cards from server snapshot.

   Conventions
   1) Layout
      - Uses ~/Views/Shared/_Layout.cshtml (global CSS/JS).

   2) Styles
      - Component CSS:
          ~/css/components/_HomeCardComponent.css
          ~/css/components/_DashboardSettings.css
      - Page CSS:
          ~/css/pages/home.index.css
      - Keep order: AIMS.styles.css → base → components → page.
        (AIMS.styles.css must load before component/page CSS for scoped styles.)

   3) Scripts
      - Page script:            ~/js/pages/home.index.js
      - Component scripts:      ~/js/components/dashboard-settings.js
                                ~/js/components/summary-cards.js
      - No inline JS, except the server snapshot bootstrap block (below).

   4) Snapshot
      - Controller provides ViewData["CardSnapshot"] with SummaryCardDto rows.
      - We persist a small snapshot to localStorage for first-paint numbers.

   5) Accessibility
      - Cards region is announced via role="region" + aria-label.
      - Pager buttons have aria-labels.

   6) Indentation
      - 4 spaces, no tabs.

   ====================================================================== *@

@using System.Text.Json
@using AIMS.ViewModels

@{
    ViewData["Title"] = "Home";
    var snap = ViewData["CardSnapshot"];
}

@section Styles {
  <!-- Order matters: base → shared components → page -->
  <link rel="stylesheet" href="~/AIMS.styles.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/base/site.css" asp-append-version="true" />

  <!-- Components -->
  <link rel="stylesheet" href="~/css/components/_HomeCardComponent.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/components/_Pager.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/components/_SettingsFab.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/components/_DashboardSettings.css" asp-append-version="true" />

  <!-- Page-local -->
  <link rel="stylesheet" href="~/css/pages/home.index.css" asp-append-version="true" />
}

<!-- Single settings trigger (opens the modal) -->
<button
    class="settings-btn"
    type="button"
    data-bs-toggle="modal"
    data-bs-target="#dashboardSettingsModal"
    aria-label="Open dashboard settings">
</button>

<!-- Cards viewport -->
<section class="cards-viewport" role="region" aria-label="Asset categories">
    <div class="cards-gutter">
        <!-- Strict grid modes via JS (.mode-3x2 / .mode-2x2 / .mode-2x1) -->
        <div class="cards-grid mode-3x2 hydrating" id="cards-grid" data-testid="cards-grid">
            @await Html.PartialAsync("~/Views/Home/_HomePageCardComponent.cshtml")
        </div>

        <!-- Pager -->
        <nav class="cards-pager" aria-label="Card pagination">
            <button type="button" class="pager-btn" id="cards-prev" aria-label="Previous page">‹ Prev</button>
            <div class="pager-dots" id="cards-dots"></div>
            <button type="button" class="pager-btn" id="cards-next" aria-label="Next page">Next ›</button>
        </nav>
    </div>
</section>

@await Html.PartialAsync("~/Views/Home/_DashboardSettings.cshtml")

@section Scripts {
    <script src="~/js/pages/home.index.js" asp-append-version="true"></script>
    <script src="~/js/components/dashboard-settings.js" asp-append-version="true"></script>
    <script src="~/js/components/summary-cards.js" asp-append-version="true"></script>

    @* IMPORTANT: write the server snapshot OUTSIDE the grid so it’s not a grid item *@
    @if (snap is IEnumerable<AIMS.Dtos.Dashboard.SummaryCardDto> ss)
    {
        <script>
            (function () {
                try {
                    const rows = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                        ss.Select(r => new {
                            assetType = r.AssetType,
                            total = r.Total,
                            available = r.Available,
                            threshold = r.Threshold,
                            isLow = (r.Threshold > 0 && r.Available < r.Threshold),
                            availablePercent = (r.Total > 0 ? (int)Math.Round((r.Available * 100.0)/r.Total) : 0)
                        })
                    ));
                    localStorage.setItem('dashboard:snapshot:v1', JSON.stringify({ ts: Date.now(), rows }));
                } catch { /* no-op */ }
            })();
        </script>
    }
}