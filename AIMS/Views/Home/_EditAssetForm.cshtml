@* Views/Home/_EditAssetForm.cshtml *@
<div class="modal fade" id="editAssetModal" tabindex="-1" aria-labelledby="editAssetModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="editAssetModalLabel">Edit Asset</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form id="editAssetForm" novalidate>
                    <!-- Hidden original tag so we know what to update even if user changes Tag # -->
                    <input type="hidden" id="OriginalTag" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="AssetName" class="form-label">Asset Name</label>
                            <input type="text" id="AssetName" class="form-control" placeholder="Enter asset name">
                        </div>

                        <div class="col-md-6">
                            <label for="AssetType" class="form-label">Type</label>
                            <input type="text" id="AssetType" class="form-control" placeholder="e.g., Laptop">
                        </div>

                        <div class="col-md-6">
                            <label for="Tag" class="form-label">Tag #</label>
                            <input type="text" id="Tag" class="form-control" placeholder="Enter tag number" required>
                            <div class="invalid-feedback">Tag # is required.</div>
                        </div>

                        <div class="col-md-6">
                            <label for="SerialNumber" class="form-label">Serial #</label>
                            <input type="text" id="SerialNumber" class="form-control" placeholder="Enter serial number">
                        </div>

                        <div class="col-md-12">
                            <label for="Comments" class="form-label">Comments</label>
                            <textarea id="Comments" class="form-control" rows="3"
                                placeholder="Add any remarks..."></textarea>
                        </div>
                    </div>

                    <hr class="my-3" />

                    <div>
                        <h6 class="mb-2">Assignment History</h6>
                        <ul id="assignment-history" class="list-unstyled mb-0">
                            @* filled by JS when opening the modal *@
                        </ul>
                    </div>
                </form>
            </div>

            <div class="modal-footer">
                <button type="button" id="next-btn" class="btn btn-primary">Next</button>
                <button type="submit" form="editAssetForm" class="btn btn-success">Save Changes</button>
            </div>

        </div>
    </div>
</div>

<script>
    (function () {
        const modalEl = document.getElementById('editAssetModal');
        if (!modalEl) return;

        const form = document.getElementById('editAssetForm');
        const originalTag = document.getElementById('OriginalTag');
        const nameEl = document.getElementById('AssetName');
        const typeEl = document.getElementById('AssetType');
        const tagEl = document.getElementById('Tag');
        const serialEl = document.getElementById('SerialNumber');
        const commentsEl = document.getElementById('Comments');
        const nextBtn = document.getElementById('next-btn');

        // Validate Tag on submit (HTML "required" also helps)
        form.addEventListener('submit', async function (e) {
            e.preventDefault();

            if (!tagEl.value.trim()) {
                tagEl.classList.add('is-invalid');
                tagEl.focus();
                return;
            }

            const orig = originalTag.value || tagEl.value.trim();

            const payload = {
                assetName: nameEl.value.trim() || null,
                type: typeEl.value.trim() || null,
                tagNumber: tagEl.value.trim() || null,
                serialNumber: serialEl.value.trim() || null,
                status: null,      // (optional) wire a status input if you add it to the modal
                comments: commentsEl.value.trim() || null
            };

            const res = await fetch(`/api/assets/${encodeURIComponent(orig)}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!res.ok) {
                const text = await res.text();
                alert('Save failed: ' + text);
                return;
            }

            const updated = await res.json();

            // Update the table row inline so the user sees changes immediately
            try {
                const table = document.querySelector('.asset-table') || document.querySelector('table');
                const tbody = table?.querySelector('tbody') || document.getElementById('table-body');
                const row = tbody ? [...tbody.rows].find(r => r.dataset.assetId === orig) : null;

                function colIndex(name) {
                    const ths = table.querySelectorAll('thead th');
                    for (let i = 0; i < ths.length; i++) {
                        const txt = (ths[i].innerText || '').trim().toLowerCase();
                        if (txt === name.toLowerCase()) return i;
                    }
                    return -1;
                }

                if (row && table) {
                    const idxName = colIndex('Asset Name');
                    const idxType = colIndex('Type');
                    const idxTag = colIndex('Tag #');
                    const idxStatus = colIndex('Status');

                    if (idxName >= 0) row.cells[idxName].textContent = updated.assetName ?? '';
                    if (idxType >= 0) row.cells[idxType].textContent = updated.type ?? '';
                    if (idxTag >= 0) row.cells[idxTag].textContent = updated.tag ?? '';
                    if (idxStatus >= 0 && updated.status !== undefined) {
                        row.cells[idxStatus].textContent = updated.status || '';
                    }

                    // Keep the row wiring correct if Tag changed
                    if (updated.tag && updated.tag !== orig) {
                        row.dataset.assetId = updated.tag;

                        // Update action buttons data-tag, if present
                        row.querySelectorAll('[data-tag]').forEach(el => el.dataset.tag = updated.tag);
                    }
                }
            } catch (_) { /* non-fatal UI update */ }

            // Close modal
            bootstrap.Modal.getOrCreateInstance(modalEl).hide();
        });

        tagEl.addEventListener('input', function () {
            if (this.value.trim()) this.classList.remove('is-invalid');
        });

        // "Next" clears only Tag + Serial
        nextBtn?.addEventListener('click', function () {
            tagEl.value = '';
            serialEl.value = '';
            tagEl.classList.remove('is-invalid');
            tagEl.focus();
        });

        // When modal is shown, clear validation state
        modalEl.addEventListener('shown.bs.modal', function () {
            tagEl.classList.remove('is-invalid');
        });
    })();
</script>