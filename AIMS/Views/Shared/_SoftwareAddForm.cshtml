<div class="modal fade" id="addSoftwareModal" tabindex="-1" aria-labelledby="addSoftwareModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addSoftwareModalLabel">Add New Software</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="softwareErrorMessage" class="alert alert-danger" style="display:none;"></div>

                <form id="SoftwareAddForm" novalidate>
                    <div class="mb-3">
                        <label for="softwareName" class="form-label">Software Name</label>
                        <input type="text" id="softwareName" name="softwareName" class="form-control" required>
                    </div>

                    <div class="mb-3">
                        <label for="softwareVersion" class="form-label">Version</label>
                        <input type="text" id="softwareVersion" name="softwareVersion" class="form-control">
                    </div>

                    <div class="mb-3">
                        <label for="softwareLicenseKey" class="form-label">License Key</label>
                        <input type="text" id="softwareLicenseKey" name="softwareLicenseKey" class="form-control"
                            required>
                    </div>

                    <div class="mb-3">
                        <label for="softwareLicenseExpiration" class="form-label">License Expiration</label>
                        <input type="date" id="softwareLicenseExpiration" name="softwareLicenseExpiration"
                            class="form-control">
                    </div>

                    <div class="mb-3">
                        <label for="softwareCost" class="form-label">Cost ($)</label>
                        <input type="number" step="0.01" id="softwareCost" name="softwareCost" class="form-control">
                    </div>

                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Add Software</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const SoftwareAddForm = document.getElementById('SoftwareAddForm');
        const addSoftwareModal = document.getElementById('addSoftwareModal');
        const softwareErrorMessage = document.getElementById('softwareErrorMessage');

        //reset modal on close
        addSoftwareModal.addEventListener('hidden.bs.modal', function () {
            SoftwareAddForm.reset();
            softwareErrorMessage.style.display = 'none';
            softwareErrorMessage.innerText = '';

            // Clear validation states
            SoftwareAddForm.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        });



        document.getElementById('SoftwareAddForm').addEventListener('submit', function (e) {
            e.preventDefault(); // Prevent form submission

            // Clear previous error message
            const errorMessageDiv = document.getElementById('softwareErrorMessage');
            errorMessageDiv.style.display = 'none';
            errorMessageDiv.innerText = '';

            //required fields are: Name, Version, License Key, Cost
            // we can also move these error messages directly inline with the classes 
            //to avoid hardcoding them here. May not be needed but might want to clean up if we have time.
            const requiredFields = [
                { id: 'softwareName', message: 'software name required.' },
                { id: 'softwareVersion', message: 'Version number required.' }, //version is mandatory now, but we might want to ask client if they need this specified to be able to add.
                { id: 'softwareLicenseKey', message: 'License Key required.' },
                { id: 'softwareCost', message: 'software cost required.' }
            ];

            // Validate required fields
            //will show inline red error warnings with the above messages if corresponding field is not entered.
            let valid = true;
            requiredFields.forEach(field => {
                const inputElem = document.getElementById(field.id);
                if (inputElem) {
                    if (!inputElem.value.trim()) {
                        inputElem.classList.add("is-invalid");
                        inputElem.value = "";
                        inputElem.placeholder = field.message;
                        valid = false;
                    } else {
                        inputElem.classList.remove("is-invalid");
                        inputElem.placeholder = "";
                    }
                }
            });

            if (!valid) return;

            // Gather form data
            const CreateSoftwareDto = {
                SoftwareName: document.getElementById('softwareName').value.trim(),
                SoftwareType: "Software",
                SoftwareVersion: document.getElementById('softwareVersion').value.trim(),
                SoftwareLicenseKey: document.getElementById('softwareLicenseKey').value.trim(),
                SoftwareLicenseExpiration: document.getElementById('softwareLicenseExpiration').value || null,
                SoftwareCost: parseFloat(document.getElementById('softwareCost').value) || 0
            };


            // Send data to server via AJAX
            fetch('/api/software/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(CreateSoftwareDto)
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.message || 'Failed to add software.'); }); //Could touch up with more directed error handling based on status code.
                    }
                    return response.json();
                })
                .then(async data => {
                    // Success = close modal and optionally refresh software list
                    const modalElem = document.getElementById('addSoftwareModal');
                    const modal = bootstrap.Modal.getInstance(modalElem);
                    if (modal) {
                        modal.hide();
                    }
                    //update softwware list
                    //and wait for 250ms to ensure backend has processed the new software
                    await new Promise(resolve => setTimeout(resolve, 250));
                    loadAssets("Software");
                })
                .catch(error => {
                    // Display error message
                    errorMessageDiv.innerText = error.message;
                    errorMessageDiv.style.display = 'block';
                });
        });
    });
</script>