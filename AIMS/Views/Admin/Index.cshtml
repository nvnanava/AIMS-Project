@{
    Layout = "~/Views/Shared/_Layout.cshtml";

    // demo data (remove when wired to real model)
    var users = new[]
    {
        new { Name = "John Smith",    Email = "john.smith@email.com",   Role = "Admin", Status = "Active",   SeparationDate = " " },
        new { Name = "Jane Doe",      Email = "jane.doe@email.com",     Role = "User",  Status = "Inactive", SeparationDate = "12/01/2024" },
        new { Name = "Max Taylor",    Email = "max.taylor@email.com",   Role = "Admin", Status = "Active",   SeparationDate = " " },
        new { Name = "Zara Khan",     Email = "zara.khan@email.com",    Role = "User",  Status = "Inactive", SeparationDate = "11/16/2023" },
        new { Name = "Leo Clark",     Email = "leo.clark@email.com",    Role = "Admin", Status = "Active",   SeparationDate = " " },
        new { Name = "Sophie Lee",    Email = "sophie.lee@email.com",   Role = "User",  Status = "Active",   SeparationDate = " " },
        new { Name = "Nina Patel",    Email = "nina.patel@email.com",   Role = "Admin", Status = "Active",   SeparationDate = " " },
        new { Name = "Andrew Jackson",Email = "andrew.jackson@email.com",Role = "User", Status = "Inactive", SeparationDate = "10/31/2024" },
        new { Name = "Taylor Jackson",Email = "taylor.jackson@email.com",Role = "Admin",Status = "Active",   SeparationDate = " " },
        new { Name = "Michael Dawson",Email = "michael.dawson@email.com",Role = "User", Status = "Inactive", SeparationDate = "09/15/2025" },
        new { Name = "Clint Clark",   Email = "clint.clark@email.com",  Role = "Admin", Status = "Active",   SeparationDate = " " },
        new { Name = "Tobi Brown",    Email = "tobi.brown@email.com",   Role = "User",  Status = "Active",   SeparationDate = " " }
    };
}
<div class="table-wrapper">
    <!-- Add User Modal -->
    <div id="addUserModal" class="admin-modal">
        <div class="admin-modal-content">
            <div class="admin-modal-header">
                <h2>Add New User</h2>
                <button type="button" class="admin-modal-close" onclick="closeAddUserModal()">&times;</button>
            </div>

<<<<<<< HEAD
=======
<div class="table-wrapper">
    <!-- Add User Modal -->
    <div id="addUserModal" class="admin-modal">
        <div class="admin-modal-content">
            <div class="admin-modal-header">
                <h2>Add New User</h2>
                <button class="admin-modal-close" onclick="closeAddUserModal()">&times;</button>
            </div>
>>>>>>> ea91f066ff36c626eaa2bfea522962149205bde4
            <form id="addUserForm" onsubmit="addUser(event)">
                <label for="userName">Name</label>
                <input type="text" id="userName" required>

                <label for="userEmail">Email</label>
                <input type="email" id="userEmail" required>

                <label for="userRole">Role</label>
                <select id="userRole" required>
                    <option value="Admin">Admin</option>
                    <option value="User">User</option>
                </select>

                <label for="userStatus">Status</label>
                <select id="userStatus" required>
                    <option value="Active">Active</option>
                    <option value="Inactive">Inactive</option>
                </select>

                <button type="submit" class="add-btn">Add User</button>
            </form>
        </div>
<<<<<<< HEAD
=======
    </div>

    <!-- Table Controls -->
    <div class="admin-table-controls">
        <div>
            <button class="add-btn" onclick="openAddUserModal()">Add User</button>
        </div>
        <div class="admin-table-controls-right">
            <label class="toggle-container">
                <input type="checkbox" id="showInactive" onchange="toggleInactiveUsers()">
                <span class="slider"></span>
                Show Inactive Users
            </label>

            <select id="roleFilter" onchange="filterByRole()">
                <option value="All">All Roles</option>
                <option value="Admin">Admin</option>
                <option value="User">User</option>
            </select>
        </div>
    </div>

    <!-- Single table (no duplicates) -->
    <table id="adminTable" class="admin-table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th onclick="sortTable(4)" style="cursor:pointer;">Status ⬍</th>
                <th>Separation Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                var statusClass = user.Status?.ToLowerInvariant() ?? "active";
                <tr class="user-row @statusClass">
                    <td>
                        <button class="icon-btn" title="Edit">
                            <svg viewBox="0 0 16 16" width="16" height="16" class="pencil-svg" aria-hidden="true">
                                <path d="M12.146.146a.5.5 0 01.708 0l3 3a.5.5 0 010 .708l-9.793 9.793a.5.5 0 01-.168.11l-5 2a.5.5 0 01-.65-.65l2-5a.5.5 0 01.11-.168L12.146.146zM11.207 2L3 10.207V13h2.793L14 4.793 11.207 2z"></path>
                            </svg>
                        </button>
                    </td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td><span class="badge @statusClass">@user.Status</span></td>
                    <td>@user.SeparationDate</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Assets Modal -->
    <div id="assetsModal" class="modal" style="display:none;">
        <div class="modal-content">
            <span class="close" onclick="closeAssetsModal()">&times;</span>
            <h2 id="assetsModalTitle"></h2>
            <div id="assetsList"></div>
        </div>
>>>>>>> ea91f066ff36c626eaa2bfea522962149205bde4
    </div>

    <!-- Table Controls -->
    <div class="admin-table-controls">
        <div>
            <button class="add-btn" onclick="openAddUserModal()">Add User</button>
        </div>
        <div class="admin-table-controls-right">
            <label class="toggle-container">
                <input type="checkbox" id="showInactive" onchange="toggleInactiveUsers()">
                <span class="slider"></span>
                Show Inactive Users
            </label>

            <select id="roleFilter" onchange="filterByRole()">
                <option value="All">All Roles</option>
                <option value="Admin">Admin</option>
                <option value="User">User</option>
            </select>
        </div>
    </div>

    <table id="adminTable" class="admin-table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th onclick="sortTable(4)" style="cursor:pointer;">Status ⬍</th>
                <th>Separation Date</th>
                <th>Assets</th>
            </tr>
        </thead>
        <tbody>
            @{
                var users = new[]
                {
                    new { Name = "John Smith", Email = "john.smith@email.com", Role = "Admin", Status = "Active", SeparationDate = " " },
                    new { Name = "Jane Doe", Email = "jane.doe@email.com", Role = "User", Status = "Inactive", SeparationDate = "12/01/2024" },
                    new { Name = "Max Taylor", Email = "max.taylor@email.com", Role = "Admin", Status = "Active", SeparationDate = " "  },
                    new { Name = "Zara Khan", Email = "zara.khan@email.com", Role = "User", Status = "Inactive", SeparationDate = "11/16/2023" },
                    new { Name = "Leo Clark", Email = "leo.clark@email.com", Role = "Admin", Status = "Active", SeparationDate = " " },
                    new { Name = "Sophie Lee", Email = "sophie.lee@email.com", Role = "User", Status = "Active", SeparationDate = " " },
                    new { Name = "Nina Patel", Email = "nina.patel@email.com", Role = "Admin", Status = "Active", SeparationDate = " " },
                    new { Name = "Andrew Jackson", Email = "andrew.jackson@email.com", Role = "User", Status = "Inactive", SeparationDate = "10/31/2024" },
                    new { Name = "Taylor Jackson", Email = "taylor.jackson@email.com", Role = "Admin", Status = "Active", SeparationDate = " " },
                    new { Name = "Michael Dawson", Email = "michael.dawson@email.com", Role = "User", Status = "Inactive", SeparationDate = "09/15/2025" },
                    new { Name = "Clint Clark", Email = "clint.clark@email.com", Role = "Admin", Status = "Active", SeparationDate = " " },
                    new { Name = "Tobi Brown", Email = "tobi.brown@email.com", Role = "User", Status = "Active", SeparationDate = " " }
                };
            }

            @foreach (var user in users)
            {
                <tr class="user-row @(user.Status.ToLower())">
                    <td>
                        <button class="icon-btn" title="Edit" onclick="openEditUser('@user.Name')">
                            <svg viewBox="0 0 16 16" width="16" height="16" class="pencil-svg" aria-hidden="true">
                                <path d="M12.146.146a.5.5 0 01.708 0l3 3a.5.5 0 010 .708l-9.793 9.793a.5.5 0 01-.168.11l-5 2a.5.5 0 01-.65-.65l2-5a.5.5 0 01.11-.168L12.146.146zM11.207 2L3 10.207V13h2.793L14 4.793 11.207 2z"></path>
                            </svg>
                        </button>
                    </td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td><span class="badge @(user.Status.ToLower())">@user.Status</span></td>
                    <td>@user.SeparationDate</td>
                    <td>
                        <button class="assets-btn" type="button" onclick="showAssetsModal('@user.Name')">View Assets</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Assets modal (from main branch) -->
    <div id="assetsModal" class="modal" style="display:none;">
        <div class="modal-content">
            <span class="close" onclick="closeAssetsModal()">&times;</span>
            <h2 id="assetsModalTitle"></h2>
            <div id="assetsList"><!-- populated by JS --></div>
        </div>
    </div>

    <script>
        // Sorting
        function sortTable(n) {
            const table = document.getElementById("adminTable");
            const rows = Array.from(table.rows).slice(1);
            const asc = table.getAttribute("data-sort-dir") !== "asc";

            rows.sort((a, b) => {
                const x = a.cells[n].innerText.toLowerCase();
                const y = b.cells[n].innerText.toLowerCase();
                return asc ? x.localeCompare(y) : y.localeCompare(x);
            });

            rows.forEach(row => table.tBodies[0].appendChild(row));
            table.setAttribute("data-sort-dir", asc ? "asc" : "desc");
        }

        // Inactive user toggle
        function toggleInactiveUsers() {
            const showInactive = document.getElementById("showInactive").checked;
            document.querySelectorAll(".user-row.inactive").forEach(row => {
                row.style.display = showInactive ? "" : "none";
            });
        }

        // Filter by role
        function filterByRole() {
            const role = document.getElementById("roleFilter").value;
            document.querySelectorAll("#adminTable tbody tr").forEach(row => {
                const userRole = row.cells[3].innerText.trim();
                row.style.display = (role === "All" || userRole === role) ? "" : "none";
            });
        }

        // Add user modal
        function openAddUserModal() {
            const modal = document.getElementById("addUserModal");
            modal.classList.add("show");
        }
        function closeAddUserModal() {
            const modal = document.getElementById("addUserModal");
            modal.classList.remove("show");
        }

        // simple addUser stub (prevents errors)
        function addUser(e) {
            e.preventDefault();
            // For now just close modal — extend later to call API
            closeAddUserModal();
            alert("Add user submitted (stub).");
        }

        function openEditUser(name) {
            // placeholder
            alert("Edit user: " + name);
        }

        // Assets modal logic (from main)
        function showAssetsModal(userName) {
            document.getElementById("assetsModalTitle").innerText = "Assets assigned to " + userName;

            // mock data (replace with real API later)
            const dummyAssets = [
                { type: "Hardware", name: "Laptop Dell XPS 13" },
                { type: "Software", name: "Microsoft Office 365" }
            ];

            let html = "<ul>";
            dummyAssets.forEach(a => html += `<li><strong>${a.type}:</strong> ${a.name}</li>`);
            html += "</ul>";
            document.getElementById("assetsList").innerHTML = html;

            document.getElementById("assetsModal").style.display = "block";
        }

        function closeAssetsModal() {
            document.getElementById("assetsModal").style.display = "none";
        }

        // initialise on load
        window.addEventListener("load", () => {
            toggleInactiveUsers();
        });

        // close modal when clicking outside modal-content
        window.addEventListener("click", (e) => {
            const assetsModal = document.getElementById("assetsModal");
            if (assetsModal && e.target === assetsModal) closeAssetsModal();
            const addModal = document.getElementById("addUserModal");
            if (addModal && e.target === addModal) closeAddUserModal();
        });
    </script>
</div>

<script>
function sortTable(n) {
    const table = document.getElementById("adminTable");
    const tbody = table.tBodies[0];
    const rows = Array.from(tbody.rows);
    const asc = table.getAttribute("data-sort-dir") !== "asc";

    rows.sort((a, b) => {
        const x = a.cells[n].innerText.toLowerCase();
        const y = b.cells[n].innerText.toLowerCase();
        return asc ? x.localeCompare(y) : y.localeCompare(x);
    });

    rows.forEach(r => tbody.appendChild(r));
    table.setAttribute("data-sort-dir", asc ? "asc" : "desc");
}

// Inactive user toggle
function toggleInactiveUsers() {
    const showInactive = document.getElementById("showInactive").checked;
    document.querySelectorAll(".user-row.inactive").forEach(row => {
        row.style.display = showInactive ? "" : "none";
    });
}
window.onload = toggleInactiveUsers;

// Filter by role
function filterByRole() {
    const role = document.getElementById("roleFilter").value;
    document.querySelectorAll("#adminTable tbody tr").forEach(row => {
        const userRole = row.cells[3].innerText.trim();
        row.style.display = (role === "All" || userRole === role) ? "" : "none";
    });
}

// Add User Modal (open/close)
function openAddUserModal() {
    document.getElementById("addUserModal").classList.add("show");
}
function closeAddUserModal() {
    document.getElementById("addUserModal").classList.remove("show");
}

// Stub: handle add user
function addUser(e) {
    e.preventDefault();
    // TODO: wire to backend
    closeAddUserModal();
}
</script>