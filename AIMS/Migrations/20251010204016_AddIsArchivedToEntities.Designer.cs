// <auto-generated />
using System;
using AIMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIMS.Migrations._local_sync
{
    [DbContext(typeof(AimsDbContext))]
    [Migration("20251010204016_AddIsArchivedToEntities")]
    partial class AddIsArchivedToEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIMS.Models.Agreement", b =>
                {
                    b.Property<int>("AgreementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreementID"));

                    b.Property<int>("AssetKind")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HardwareID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.HasKey("AgreementID");

                    b.HasIndex("HardwareID");

                    b.HasIndex("SoftwareID");

                    b.ToTable("Agreements", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Agreement_ExactlyOneAsset", "\r\n                    (\r\n                        ([AssetKind] = 1 AND [HardwareID] IS NOT NULL AND [SoftwareID] IS NULL)\r\n                        OR\r\n                        ([AssetKind] = 2 AND [SoftwareID] IS NOT NULL AND [HardwareID] IS NULL)\r\n                    )");
                        });
                });

            modelBuilder.Entity("AIMS.Models.Assignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<int>("AssetKind")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HardwareID")
                        .HasColumnType("int");

                    b.Property<int?>("OfficeID")
                        .HasColumnType("int");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UnassignedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AssignmentID");

                    b.HasIndex("OfficeID");

                    b.HasIndex("UserID");

                    b.HasIndex("HardwareID", "UnassignedAtUtc")
                        .IsUnique()
                        .HasFilter("[HardwareID] IS NOT NULL AND [UnassignedAtUtc] IS NULL");

                    b.HasIndex("SoftwareID", "UnassignedAtUtc")
                        .IsUnique()
                        .HasFilter("[SoftwareID] IS NOT NULL AND [UnassignedAtUtc] IS NULL");

                    b.ToTable("Assignments", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Assignment_ExactlyOneAsset", "\r\n                    (\r\n                        ([AssetKind] = 1 AND [HardwareID] IS NOT NULL AND [SoftwareID] IS NULL)\r\n                        OR\r\n                        ([AssetKind] = 2 AND [SoftwareID] IS NOT NULL AND [HardwareID] IS NULL)\r\n                    )");
                        });
                });

            modelBuilder.Entity("AIMS.Models.AuditLog", b =>
                {
                    b.Property<int>("AuditLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssetKind")
                        .HasColumnType("int");

                    b.Property<string>("BlobUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("HardwareID")
                        .HasColumnType("int");

                    b.Property<string>("SnapshotJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoftwareID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AuditLogID");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("HardwareID");

                    b.HasIndex("SoftwareID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogs", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_AuditLog_ExactlyOneAsset", "\r\n                    (\r\n                        ([AssetKind] = 1 AND [HardwareID] IS NOT NULL AND [SoftwareID] IS NULL)\r\n                        OR\r\n                        ([AssetKind] = 2 AND [SoftwareID] IS NOT NULL AND [HardwareID] IS NULL)\r\n                    )");
                        });
                });

            modelBuilder.Entity("AIMS.Models.AuditLogChange", b =>
                {
                    b.Property<int>("AuditLogChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditLogChangeID"));

                    b.Property<int>("AuditLogID")
                        .HasColumnType("int");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditLogChangeID");

                    b.HasIndex("AuditLogID", "Field");

                    b.ToTable("AuditLogChanges", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Hardware", b =>
                {
                    b.Property<int>("HardwareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HardwareID"));

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateOnly>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateOnly>("WarrantyExpiration")
                        .HasColumnType("date");

                    b.HasKey("HardwareID");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasFilter("[SerialNumber] IS NOT NULL");

                    b.ToTable("HardwareAssets", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Office", b =>
                {
                    b.Property<int>("OfficeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfficeID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("OfficeID");

                    b.HasIndex("OfficeName");

                    b.ToTable("Offices", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<string>("BlobUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("GeneratedByOfficeID")
                        .HasColumnType("int");

                    b.Property<int?>("GeneratedByUserID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("ReportID");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("GeneratedByOfficeID");

                    b.HasIndex("GeneratedByUserID");

                    b.ToTable("Reports", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Software", b =>
                {
                    b.Property<int>("SoftwareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseSeatsUsed")
                        .HasColumnType("int");

                    b.Property<int>("LicenseTotalSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("SoftwareCost")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateOnly?>("SoftwareLicenseExpiration")
                        .HasColumnType("date");

                    b.Property<string>("SoftwareLicenseKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SoftwareName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SoftwareType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("SoftwareUsageData")
                        .HasColumnType("bigint");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SoftwareID");

                    b.HasIndex("SoftwareLicenseKey")
                        .IsUnique()
                        .HasFilter("[SoftwareLicenseKey] IS NOT NULL");

                    b.ToTable("SoftwareAssets", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Threshold", b =>
                {
                    b.Property<int>("ThresholdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThresholdID"));

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("ThresholdValue")
                        .HasColumnType("int");

                    b.HasKey("ThresholdID");

                    b.HasIndex("AssetType");

                    b.ToTable("Thresholds", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("GraphObjectID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("SupervisorID");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("AIMS.Models.Agreement", b =>
                {
                    b.HasOne("AIMS.Models.Hardware", "Hardware")
                        .WithMany()
                        .HasForeignKey("HardwareID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AIMS.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Hardware");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("AIMS.Models.Assignment", b =>
                {
                    b.HasOne("AIMS.Models.Hardware", "Hardware")
                        .WithMany()
                        .HasForeignKey("HardwareID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIMS.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeID");

                    b.HasOne("AIMS.Models.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AIMS.Models.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hardware");

                    b.Navigation("Office");

                    b.Navigation("Software");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMS.Models.AuditLog", b =>
                {
                    b.HasOne("AIMS.Models.Hardware", "HardwareAsset")
                        .WithMany()
                        .HasForeignKey("HardwareID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AIMS.Models.Software", "SoftwareAsset")
                        .WithMany()
                        .HasForeignKey("SoftwareID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AIMS.Models.User", "User")
                        .WithMany("AuditActions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HardwareAsset");

                    b.Navigation("SoftwareAsset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AIMS.Models.AuditLogChange", b =>
                {
                    b.HasOne("AIMS.Models.AuditLog", "AuditLog")
                        .WithMany("Changes")
                        .HasForeignKey("AuditLogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditLog");
                });

            modelBuilder.Entity("AIMS.Models.Report", b =>
                {
                    b.HasOne("AIMS.Models.Office", "GeneratedByOffice")
                        .WithMany()
                        .HasForeignKey("GeneratedByOfficeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AIMS.Models.User", "GeneratedByUser")
                        .WithMany()
                        .HasForeignKey("GeneratedByUserID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GeneratedByOffice");

                    b.Navigation("GeneratedByUser");
                });

            modelBuilder.Entity("AIMS.Models.User", b =>
                {
                    b.HasOne("AIMS.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AIMS.Models.User", "Supervisor")
                        .WithMany("DirectReports")
                        .HasForeignKey("SupervisorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AIMS.Models.AuditLog", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("AIMS.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AIMS.Models.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("AuditActions");

                    b.Navigation("DirectReports");
                });
#pragma warning restore 612, 618
        }
    }
}